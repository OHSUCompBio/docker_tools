<tool id="sample_metrics" name="Sample Level Metrics" version="0.6.4" >
  <description>Metrics calculated at the sample level, for use in CGD and for additional QC.</description>
  
  <requirements>
    <requirement type="package" version="1.9">samtools</requirement>
  </requirements>

  <version_command>$__tool_directory__/sample_metrics.py --version</version_command>

  <command><![CDATA[
    $__tool_directory__/sample_metrics.py
    #if $probeqc
      --probeqc_after '${probeqc}'
    #end if
    #if $umi.umi_sel == 'umi_yes':
      --probeqc_before '${probeqc_before_umi}'
    #end if
    #if $picard_metrics
      --picard_summary '${picard_metrics}'
    #end if
    --outfile '${output}'
    --outfile_new '${output_new}'
    --outfile_txt '${output_txt}'
    #if $primers_bed:
        --primers_bed '${primers_bed}'
    #end if
    #if $primers_bam:
        --primers_bam '${primers_bam}'
    #end if
    #if $msi:
        --msi '${msi}'
    #end if
    #if $gatk_count_reads_total:
        --gatk_count_reads_total '${gatk_count_reads_total}'
    #end if
    #if $gatk_count_reads_ints:
        --gatk_count_reads_ints '${gatk_count_reads_ints}'
    #end if
    #for $input in $json_in:
        #if $input:
            --json_in "${input}"
        #end if
    #end for
    #if $workflow:
        --workflow '${workflow}'
    #end if

]]></command>

  <inputs>
      <param name="probeqc" type="data" format="txt" optional="true" label="ProbeQC Metrics" help="ProbeQC metrics file, as produced by the intervalqc_v2 script.  If you intend on producing UMI metrics, this would be the coverage QC AFTER UMI deduplication." />
      <param name="picard_metrics" type="data" format="txt" optional="true" label="Picard Alignment Summary Metrics" help="Alignment summary metrics produced by the Picard CollectAlignmentSummaryMetrics tool." />
      <param name="primers_bed" type="data" format="bed" optional="true" label="Primers BED" help="BED file containing primer coordinates only." />
      <param name="primers_bam" type="data" format="bam" optional="true" label="Primers BAM" help="BAM file to calculate primer reads on target." />
      <param name="gatk_count_reads_total" type="data" format="txt" optional="true" label="GATK4 CountReads Total" help="Total counts resulting from CountReads on a BAM file." />
      <param name="gatk_count_reads_ints" type="data" format="txt" optional="true" label="GATK4 CountReads Intervals" help="Target interval counts resulting from CountReads on a BAM file." />
      <param name="msi" type="data" format="tabular" optional="true" label="MSIsensor TSV" help="TSV file with MSI results." />
      <param name="json_in" type="data" format="txt" optional="true" multiple="true" label="JSON Formatted Metrics File" help="Some arbitrary number of input files containing json formatted metrics." />
      <conditional name="umi">
          <param label="Assess UMI deduplication" name="umi_sel" type="select">
              <option value="umi_yes">Yes</option>
              <option value="umi_no">No</option>
          </param>
          <when value="umi_yes">
              <param name="probeqc_before_umi" type="data" format="txt" label="ProbeQC Metrics Pre-UMI" truevalue="--probeqc_before" help="ProbeQC metrics file produced before any UMI deduplication takes place.  Optional." />
          </when>
      </conditional>
      <param name="workflow" type="text" label="Workflow Name" optional="true" help="Name of the workflow that is being run." />
  </inputs>
  <outputs>
    <data format="txt" name="output" label="${tool.name} on ${on_string}: json" />
    <data format="txt" name="output_new" label="${tool.name} on ${on_string}: json [NEW STYLE]" />
    <data format="txt" name="output_txt" label="${tool.name} on ${on_string}: txt" />
  </outputs>

  <tests></tests>

  <help>
      Metrics calculated at the sample level, for use in CGD and for additional QC.
  </help>

  <citations></citations>

</tool>
