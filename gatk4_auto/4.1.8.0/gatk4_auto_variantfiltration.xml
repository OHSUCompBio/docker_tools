<tool id="gatk4_auto_variantfiltration" name="GATK4 AUTO VariantFiltration" version="@WRAPPER_VERSION@0" profile="18.01">
  <description>- Filter variant calls based on INFO and/or FORMAT annotations</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="version_cmd"/>
  <command detect_errors="exit_code"><![CDATA[#include source=$set_sections#
#include source=$pre_gatk_excl_ints_chth#
#include source=$bam_index_pre_chth#
#include source=$pre_gatk_ints_chth#
#if $optional.mask
#set datatype = $optional.mask.datatype
#if $optional.mask.is_of_type("vcf_bgzip")
ln -s $optional.mask mask.vcf.gz &&
tabix mask.vcf.gz &&
#else
ln -s $optional.mask mask.vcf &&
gatk IndexFeatureFile -I mask.vcf &&
#end if
#end if
#include source=$gatk_tabix_multi#
@CMD_BEGIN@ VariantFiltration
#if $common.add_output_sam_program_record
  $common.add_output_sam_program_record
#end if

#if $common.add_output_vcf_command_line
  $common.add_output_vcf_command_line
#end if

#if $optional.apply_allele_specific_filters
  $optional.apply_allele_specific_filters
#end if

#if $optional.arguments_file
  --arguments_file $optional.arguments_file
#end if

#if $optional.cloud_index_prefetch_buffer
  --cloud-index-prefetch-buffer $optional.cloud_index_prefetch_buffer
#end if

#if $optional.cloud_prefetch_buffer
  --cloud-prefetch-buffer $optional.cloud_prefetch_buffer
#end if

#if $optional.cluster_size
  --cluster-size $optional.cluster_size
#end if

#if $optional.cluster_window_size
  --cluster-window-size $optional.cluster_window_size
#end if

#if $optional.disable_bam_index_caching
  $optional.disable_bam_index_caching
#end if

#for $num, $txt in enumerate($common.disable_read_filter_rpt)
#if $txt.disable_read_filter
--disable-read-filter '$txt.disable_read_filter'
#end if
#end for
#if $optional.disable_sequence_dictionary_validation
  $optional.disable_sequence_dictionary_validation
#end if

#if $common.disable_tool_default_read_filters
  $common.disable_tool_default_read_filters
#end if

#include source=$gatk_excl_ints_chth#
#for $num, $txt in enumerate($optional.filter_expression_rpt)
#if $txt.filter_expression
--filter-expression '$txt.filter_expression'
#end if
#end for
#for $num, $txt in enumerate($optional.filter_name_rpt)
#if $txt.filter_name
--filter-name '$txt.filter_name'
#end if
#end for
#if $optional.filter_not_in_mask
  $optional.filter_not_in_mask
#end if

#if $common.gatk_config_file
  --gatk-config-file $common.gatk_config_file
#end if

#if $optional.gcs_max_retries
  --gcs-max-retries $optional.gcs_max_retries
#end if

#for $num, $txt in enumerate($optional.genotype_filter_expression_rpt)
#if $txt.genotype_filter_expression
--genotype-filter-expression '$txt.genotype_filter_expression'
#end if
#end for
#for $num, $txt in enumerate($optional.genotype_filter_name_rpt)
#if $txt.genotype_filter_name
--genotype-filter-name '$txt.genotype_filter_name'
#end if
#end for
#include source=$gatk_bam_input#
#if $optional.interval_merging_rule
  --interval-merging-rule $optional.interval_merging_rule
#end if

#if $common.interval_set_rule
  --interval-set-rule $common.interval_set_rule
#end if

#include source=$gatk_ints_chth#
#if $optional.invalidate_previous_filters
  $optional.invalidate_previous_filters
#end if

#if $optional.invert_filter_expression
  $optional.invert_filter_expression
#end if

#if $optional.invert_genotype_filter_expression
  $optional.invert_genotype_filter_expression
#end if

#if $common.lenient
  $common.lenient
#end if

#if $optional.mask
#if $optional.mask.is_of_type("vcf_bgzip")
--mask mask.vcf.gz
#else
--mask mask.vcf
#end if
#end if
#if $optional.mask_extension
  --mask-extension $optional.mask_extension
#end if

#if $optional.mask_name
  --mask-name $optional.mask_name
#end if

#if $optional.missing_values_evaluate_as_failing
  --missing-values-evaluate-as-failing $optional.missing_values_evaluate_as_failing
#end if

#include source=$vcf_output_opts#
#if $common.QUIET
  --QUIET $common.QUIET
#end if

#for $num, $txt in enumerate($common.read_filter_rpt)
#if $txt.read_filter
--read-filter '$txt.read_filter'
#end if
#end for
#if $common.read_validation_stringency
  --read-validation-stringency $common.read_validation_stringency
#end if

#include source=$ref_opts#
#if $common.seconds_between_progress_updates
  --seconds-between-progress-updates $common.seconds_between_progress_updates
#end if

#include source=$gatk_seqdict#
#if $optional.set_filtered_genotype_to_no_call
  $optional.set_filtered_genotype_to_no_call
#end if

#if $optional.sites_only_vcf_output
  $optional.sites_only_vcf_output
#end if

#if $common.tmp_dir
  --tmp-dir $common.tmp_dir
#end if

#if $common.use_jdk_deflater
  $common.use_jdk_deflater
#end if

#if $common.use_jdk_inflater
  $common.use_jdk_inflater
#end if

#include source=$gatk_input_multi#
#if $common.verbosity
  --verbosity $common.verbosity
#end if
]]></command>
  <inputs>
    <expand macro="vcf_input_params_multi"/>
    <expand macro="gzip_vcf_params"/>
    <section name="optional" title="Optional Parameters" expanded="False">
      <expand macro="gatk_ints"/>
      <expand macro="ref_sel"/>
      <param name="apply_allele_specific_filters" argument="--apply-allele-specific-filters" type="boolean" truevalue="--apply-allele-specific-filters" falsevalue="" optional="true" checked="false" label="Apply Allele Specific Filters" help="Set mask at the allele level. This option is not compatible with clustering. "/>
      <param name="arguments_file" argument="--arguments_file" type="data" optional="true" format="txt" label="Arguments_File" help="read one or more arguments files and add them to the command line. "/>
      <param name="cloud_index_prefetch_buffer" argument="--cloud-index-prefetch-buffer" type="integer" optional="true" value="-1" label="Cloud Index Prefetch Buffer" help="Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. "/>
      <param name="cloud_prefetch_buffer" argument="--cloud-prefetch-buffer" type="integer" optional="true" value="40" label="Cloud Prefetch Buffer" help="Size of the cloud-only prefetch buffer (in MB; 0 to disable). "/>
      <param name="cluster_size" argument="--cluster-size" type="integer" optional="true" value="3" label="Cluster Size" help="The number of SNPs which make up a cluster. Must be at least 2. Works together with the --cluster-window-size argument."/>
      <param name="cluster_window_size" argument="--cluster-window-size" type="integer" optional="true" value="0" label="Cluster Window Size" help="The window size (in bases) in which to evaluate clustered SNPs. Works together with the --cluster-size argument.  To disable the clustered SNP filter, set this value to less than 1."/>
      <param name="disable_bam_index_caching" argument="--disable-bam-index-caching" type="boolean" truevalue="--disable-bam-index-caching" falsevalue="" optional="true" checked="false" label="Disable Bam Index Caching" help="If true, don&amp;apos;t cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified. "/>
      <param name="disable_sequence_dictionary_validation" argument="--disable-sequence-dictionary-validation" type="boolean" truevalue="--disable-sequence-dictionary-validation" falsevalue="" optional="true" checked="false" label="Disable Sequence Dictionary Validation" help="If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!. "/>
      <repeat name="filter_expression_rpt" default="1" title="Filter Expression">
        <param name="filter_expression" argument="--filter-expression" type="text" optional="true" value="" label="Filter Expression" help="One or more expressions used with INFO fields to filter. VariantFiltration accepts any number of JEXL expressions (so you can have two named filters by using&#10; --filter-name One --filter-expression &amp;quot;X &amp;lt; 1&amp;quot; --filter-name Two --filter-expression &amp;quot;X &amp;gt; 2&amp;quot;).&#10;&#10; It is preferable to use multiple expressions, each specifying an individual filter criteria, to a single&#10; compound expression that specifies multiple filter criteria.">
          <sanitizer>
            <valid initial="string.printable"/>
	  </sanitizer>
	</param>
     </repeat>
      <repeat name="filter_name_rpt" default="1" title="Filter Name">
        <param name="filter_name" argument="--filter-name" type="text" optional="true" value="" label="Filter Name" help="Names to use for the list of filters. This name is put in the FILTER field for variants that get filtered.  Note that there must be a 1-to-1 mapping between filter expressions and filter names."/>
      </repeat>
      <param name="filter_not_in_mask" argument="--filter-not-in-mask" type="boolean" truevalue="--filter-not-in-mask" falsevalue="" optional="true" checked="false" label="Filter Not In Mask" help="Filter records NOT in given input mask. By default, if the --mask argument is used, any variant falling in a mask will be filtered.&#10; If this argument is used, logic is reversed, and variants falling outside a given mask will be filtered.&#10; Use case is, for example, if we have an interval list or BED file with &amp;quot;good&amp;quot; sites.&#10; Note that it is up to the user to adapt the name of the mask to make it clear that the reverse logic was used&#10; (e.g. if masking against Hapmap, use --mask-name=hapmap for the normal masking and --mask-name=not_hapmap for the reverse masking)."/>
      <param name="gcs_max_retries" argument="--gcs-max-retries" type="integer" optional="true" value="20" label="Gcs Max Retries" help="If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection. "/>
      <repeat name="genotype_filter_expression_rpt" default="1" title="Genotype Filter Expression">
        <param name="genotype_filter_expression" argument="--genotype-filter-expression" type="text" optional="true" value="" label="Genotype Filter Expression" help="One or more expressions used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info). Similar to the INFO field based expressions, but used on the FORMAT (genotype) fields instead.&#10; VariantFiltration will add the sample-level FT tag to the FORMAT field of filtered samples (this does not affect the record&amp;apos;s FILTER tag).&#10; One can filter normally based on most fields (e.g. &amp;quot;GQ &amp;lt; 5.0&amp;quot;), but the GT (genotype) field is an exception. We have put in convenience&#10; methods so that one can now filter out hets (&amp;quot;isHet == 1&amp;quot;), refs (&amp;quot;isHomRef == 1&amp;quot;), or homs (&amp;quot;isHomVar == 1&amp;quot;). Also available are&#10; expressions isCalled, isNoCall, isMixed, and isAvailable, in accordance with the methods of the Genotype object.&#10;&#10; It is preferable to use multiple expressions, each specifying an individual filter criteria, to a single compound expression&#10; that specifies multiple filter criteria.">
          <sanitizer>
            <valid initial="string.printable"/>
	  </sanitizer>
	</param>
      </repeat>
      <repeat name="genotype_filter_name_rpt" default="1" title="Genotype Filter Name">
        <param name="genotype_filter_name" argument="--genotype-filter-name" type="text" optional="true" value="" label="Genotype Filter Name" help="Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered. Similar to the INFO field based expressions, but used on the FORMAT (genotype) fields instead."/>
      </repeat>
      <param name="interval_merging_rule" argument="--interval-merging-rule" type="select" optional="true" label="Interval Merging Rule" help="Interval merging rule for abutting intervals. By default, the program merges abutting intervals (i.e. intervals that are directly side-by-side but do not&#10; actually overlap) into a single continuous interval. However you can change this behavior if you want them to be&#10; treated as separate intervals instead.">
        <option selected="true" value="ALL">ALL</option>
        <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
      </param>
      <param name="invalidate_previous_filters" argument="--invalidate-previous-filters" type="boolean" truevalue="--invalidate-previous-filters" falsevalue="" optional="true" checked="false" label="Invalidate Previous Filters" help="Remove previous filters applied to the VCF. Invalidate previous filters applied to the VariantContext, applying only the filters here"/>
      <param name="invert_filter_expression" argument="--invert-filter-expression" type="boolean" truevalue="--invert-filter-expression" falsevalue="" optional="true" checked="false" label="Invert Filter Expression" help="Invert the selection criteria for --filter-expression. Invert the selection criteria for --filter-expression"/>
      <param name="invert_genotype_filter_expression" argument="--invert-genotype-filter-expression" type="boolean" truevalue="--invert-genotype-filter-expression" falsevalue="" optional="true" checked="false" label="Invert Genotype Filter Expression" help="Invert the selection criteria for --genotype-filter-expression. Invert the selection criteria for --genotype-filter-expression"/>
      <param name="mask" argument="--mask" type="data" optional="true" format="vcf,vcf_bgzip" label="Mask" help="Input mask. Any variant which overlaps entries from the provided mask file will be filtered. If the user wants logic to be reversed,&#10; i.e. filter variants that do not overlap with provided mask, then argument --filter-not-in-mask can be used.&#10; Note that it is up to the user to adapt the name of the mask to make it clear that the reverse logic was used&#10; (e.g. if masking against Hapmap, use --mask-name=hapmap for the normal masking and --mask-name=not_hapmap for the reverse masking)."/>
      <param name="mask_extension" argument="--mask-extension" type="integer" optional="true" value="0" label="Mask Extension" help="How many bases beyond records from a provided &amp;apos;mask&amp;apos; should variants be filtered. "/>
      <param name="mask_name" argument="--mask-name" type="text" optional="true" value="Mask" label="Mask Name" help="The text to put in the FILTER field if a &amp;apos;mask&amp;apos; is provided and overlaps with a variant call. When using the --mask argument, the mask-name will be annotated in the variant record.&#10; Note that when using the --filter-not-in-mask argument to reverse the masking logic,&#10; it is up to the user to adapt the name of the mask to make it clear that the reverse logic was used&#10; (e.g. if masking against Hapmap, use --mask-name=hapmap for the normal masking and --mask-name=not_hapmap for the reverse masking)."/>
      <param name="missing_values_evaluate_as_failing" argument="--missing-values-evaluate-as-failing" type="boolean" truevalue="--missing-values-evaluate-as-failing" falsevalue="" optional="true" checked="false" label="Missing Values Evaluate As Failing" help="When evaluating the JEXL expressions, missing values should be considered failing the expression. By default, if JEXL cannot evaluate your expression for a particular record because one of the annotations is not present, the whole expression evaluates as PASSing.&#10; Use this argument to have it evaluate as failing filters instead for these cases."/>
      <param name="set_filtered_genotype_to_no_call" argument="--set-filtered-genotype-to-no-call" type="boolean" truevalue="--set-filtered-genotype-to-no-call" falsevalue="" optional="true" checked="false" label="Set Filtered Genotype To No Call" help="Set filtered genotypes to no-call. If this argument is provided, set filtered genotypes to no-call (./.)."/>
      <param name="sites_only_vcf_output" argument="--sites-only-vcf-output" type="boolean" truevalue="--sites-only-vcf-output" falsevalue="" optional="true" checked="false" label="Sites Only Vcf Output" help="If true, don&amp;apos;t emit genotype fields when writing vcf file output. "/>
    </section>
    <section name="common" title="Common Parameters" expanded="False">
      <expand macro="gatk_excl_ints"/>
      <expand macro="gatk_bam_req_params_opt"/>
      <expand macro="seq_dict_sel"/>
      <param name="add_output_sam_program_record" argument="--add-output-sam-program-record" type="boolean" truevalue="--add-output-sam-program-record" falsevalue="" optional="true" checked="true" label="Add Output Sam Program Record" help="If true, adds a PG tag to created SAM/BAM/CRAM files. "/>
      <param name="add_output_vcf_command_line" argument="--add-output-vcf-command-line" type="boolean" truevalue="--add-output-vcf-command-line" falsevalue="" optional="true" checked="true" label="Add Output Vcf Command Line" help="If true, adds a command line header line to created VCF files. "/>
      <repeat name="disable_read_filter_rpt" default="1" title="Disable Read Filter">
        <param name="disable_read_filter" argument="--disable-read-filter" type="text" optional="true" value="" label="Disable Read Filter" help="Read filters to be disabled before analysis. "/>
      </repeat>
      <param name="disable_tool_default_read_filters" argument="--disable-tool-default-read-filters" type="boolean" truevalue="--disable-tool-default-read-filters" falsevalue="" optional="true" checked="false" label="Disable Tool Default Read Filters" help="Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on). "/>
      <param name="gatk_config_file" argument="--gatk-config-file" type="data" optional="true" format="txt" label="Gatk Config File" help="A configuration file to use with the GATK. "/>
      <param name="interval_set_rule" argument="--interval-set-rule" type="select" optional="true" label="Interval Set Rule" help="Set merging approach to use for combining interval inputs. By default, the program will take the UNION of all intervals specified using -L and/or -XL. However, you can&#10; change this setting for -L, for example if you want to take the INTERSECTION of the sets instead. E.g. to&#10; perform the analysis only on chromosome 1 exomes, you could specify -L exomes.intervals -L 1 --interval-set-rule&#10; INTERSECTION. However, it is not possible to modify the merging approach for intervals passed using -XL (they will&#10; always be merged using UNION).&#10;&#10; Note that if you specify both -L and -XL, the -XL interval set will be subtracted from the -L interval set.">
        <option selected="true" value="UNION">UNION</option>
        <option value="INTERSECTION">INTERSECTION</option>
      </param>
      <param name="lenient" argument="--lenient" type="boolean" truevalue="--lenient" falsevalue="" optional="true" checked="false" label="Lenient" help="Lenient processing of VCF files. "/>
      <param name="QUIET" argument="--QUIET" type="boolean" truevalue="--QUIET" falsevalue="" optional="true" checked="false" label="Quiet" help="Whether to suppress job-summary info on System.err. "/>
      <repeat name="read_filter_rpt" default="1" title="Read Filter">
        <param name="read_filter" argument="--read-filter" type="text" optional="true" value="" label="Read Filter" help="Read filters to be applied before analysis. "/>
      </repeat>
      <param name="read_validation_stringency" argument="--read-validation-stringency" type="select" optional="true" label="Read Validation Stringency" help="Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. ">
        <option value="STRICT">STRICT</option>
        <option value="LENIENT">LENIENT</option>
        <option selected="true" value="SILENT">SILENT</option>
      </param>
      <param name="seconds_between_progress_updates" argument="--seconds-between-progress-updates" type="float" optional="true" value="10.0" label="Seconds Between Progress Updates" help="Output traversal statistics every time this many seconds elapse. "/>
      <param name="tmp_dir" argument="--tmp-dir" type="text" optional="true" value="" label="Tmp Dir" help="Temp directory to use. "/>
      <param name="use_jdk_deflater" argument="--use-jdk-deflater" type="boolean" truevalue="--use-jdk-deflater" falsevalue="" optional="true" checked="false" label="Use Jdk Deflater" help="Whether to use the JdkDeflater (as opposed to IntelDeflater). "/>
      <param name="use_jdk_inflater" argument="--use-jdk-inflater" type="boolean" truevalue="--use-jdk-inflater" falsevalue="" optional="true" checked="false" label="Use Jdk Inflater" help="Whether to use the JdkInflater (as opposed to IntelInflater). "/>
      <param name="verbosity" argument="--verbosity" type="select" optional="true" label="Verbosity" help="Control verbosity of logging. ">
        <option value="ERROR">ERROR</option>
        <option value="WARNING">WARNING</option>
        <option selected="true" value="INFO">INFO</option>
        <option value="DEBUG">DEBUG</option>
      </param>
    </section>
  </inputs>
  <outputs>
    <expand macro="gzip_vcf_output_params"/>
  </outputs>
  <tests/>
  <help><![CDATA[Filter variant calls based on INFO and/or FORMAT annotations

This tool is designed for hard-filtering variant calls based on certain
criteria. Records are hard-filtered by changing the value in the FILTER
field to something other than PASS. Filtered records will be preserved
in the output unless their removal is requested in the command line.

Inputs
~~~~~~

-  A VCF of variant calls to filter.
-  One or more filtering expressions and corresponding filter names.

Output
~~~~~~

A filtered VCF in which passing variants are annotated as PASS and
failing variants are annotated with the name(s) of the filter(s) they
failed.

Usage example
~~~~~~~~~~~~~

::

      gatk VariantFiltration \
      -R reference.fasta \
      -V input.vcf.gz \
      -O output.vcf.gz \
      --filter-name "my_filter1" \
      --filter-expression "AB < 0.2" \
      --filter-name "my_filter2" \
      --filter-expression "MQ0 > 50"
    

Note
~~~~

Composing filtering expressions can range from very simple to extremely
complicated depending on what you're trying to do.

Compound expressions (ones that specify multiple conditions connected by
&&, AND, \||, or OR, and reference multiple attributes) require special
consideration. By default, variants that are missing one or more of the
attributes referenced in a compound expression are treated as PASS for
the entire expression, even if the variant would satisfy the filter
criteria for another part of the expression. This can lead to unexpected
results if any of the attributes referenced in a compound expression are
present for some variants, but missing for others.

It is strongly recommended that such expressions be provided as
individual arguments, each referencing a single attribute and specifying
a single criteria. This ensures that all of the individual expression
are applied to each variant, even if a given variant is missing values
for some of the expression conditions.

As an example, multiple individual expressions provided like this:

::

      gatk VariantFiltration \
      -R reference.fasta \
      -V input.vcf.gz \
      -O output.vcf.gz \
      --filter-name "my_filter1" \
      --filter-expression "AB < 0.2" \
      --filter-name "my_filter2" \
      --filter-expression "MQ0 > 50"
    

are preferable to a single compound expression such as this:

::

       gatk VariantFiltration \
       -R reference.fasta \
       -V input.vcf.gz \
       -O output.vcf.gz \
       --filter-name "my_filter" \
       --filter-expression "AB < 0.2 || MQ0 > 50"
     

See this `article about using JEXL
expressions <https://www.broadinstitute.org/gatk/guide/article?id=1255>`__
for more information.
]]></help>
  <citations>
    <expand macro="citations"/>
  </citations>
</tool>
