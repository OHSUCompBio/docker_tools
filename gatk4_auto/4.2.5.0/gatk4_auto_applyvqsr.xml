<tool id="gatk4_auto_applyvqsr" name="GATK4 AUTO ApplyVQSR" version="@WRAPPER_VERSION@0" profile="18.01">
  <description>-  Apply a score cutoff to filter variants based on a recalibration table</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="version_cmd"/>
  <command detect_errors="exit_code"><![CDATA[#include source=$set_sections#
#include source=$pre_gatk_excl_ints_chth#
#include source=$bam_index_pre_chth#
#include source=$pre_gatk_ints_chth#
#if $recal_file
#set datatype = $recal_file.datatype
#if $recal_file.is_of_type("vcf_bgzip")
ln -s $recal_file recal_file.vcf.gz &&
tabix recal_file.vcf.gz &&
#else
ln -s $recal_file recal_file.vcf &&
gatk IndexFeatureFile -I recal_file.vcf &&
#end if
#end if
#include source=$gatk_tabix_multi#
@CMD_BEGIN@ ApplyVQSR
#if $common.add_output_sam_program_record
  $common.add_output_sam_program_record
#end if

#if $common.add_output_vcf_command_line
  $common.add_output_vcf_command_line
#end if

#if $optional.arguments_file
  --arguments_file $optional.arguments_file
#end if

#if $optional.cloud_index_prefetch_buffer
  --cloud-index-prefetch-buffer $optional.cloud_index_prefetch_buffer
#end if

#if $optional.cloud_prefetch_buffer
  --cloud-prefetch-buffer $optional.cloud_prefetch_buffer
#end if

#if $optional.disable_bam_index_caching
  $optional.disable_bam_index_caching
#end if

#for $num, $txt in enumerate($common.disable_read_filter_rpt)
#if $txt.disable_read_filter
--disable-read-filter '$txt.disable_read_filter'
#end if
#end for
#if $optional.disable_sequence_dictionary_validation
  $optional.disable_sequence_dictionary_validation
#end if

#if $common.disable_tool_default_read_filters
  $common.disable_tool_default_read_filters
#end if

#if $optional.exclude_filtered
  $optional.exclude_filtered
#end if

#include source=$gatk_excl_ints_chth#
#if $common.gatk_config_file
  --gatk-config-file $common.gatk_config_file
#end if

#if $optional.gcs_max_retries
  --gcs-max-retries $optional.gcs_max_retries
#end if

#if $optional.ignore_all_filters
  $optional.ignore_all_filters
#end if

#for $num, $txt in enumerate($optional.ignore_filter_rpt)
#if $txt.ignore_filter
--ignore-filter '$txt.ignore_filter'
#end if
#end for
#include source=$gatk_bam_input#
#if $optional.interval_merging_rule
  --interval-merging-rule $optional.interval_merging_rule
#end if

#if $common.interval_set_rule
  --interval-set-rule $common.interval_set_rule
#end if

#include source=$gatk_ints_chth#
#if $common.lenient
  $common.lenient
#end if

#if $advanced.lod_score_cutoff
  --lod-score-cutoff $advanced.lod_score_cutoff
#end if

#if $common.max_variants_per_shard
  --max-variants-per-shard $common.max_variants_per_shard
#end if

#if $optional.mode
  --mode $optional.mode
#end if

#include source=$vcf_output_opts#
#if $common.QUIET
  --QUIET $common.QUIET
#end if

#for $num, $txt in enumerate($common.read_filter_rpt)
#if $txt.read_filter
--read-filter '$txt.read_filter'
#end if
#end for
#if $common.read_validation_stringency
  --read-validation-stringency $common.read_validation_stringency
#end if

#if $recal_file
#if $recal_file.is_of_type("vcf_bgzip")
--recal-file recal_file.vcf.gz
#else
--recal-file recal_file.vcf
#end if
#end if
#include source=$ref_opts#
#if $common.seconds_between_progress_updates
  --seconds-between-progress-updates $common.seconds_between_progress_updates
#end if

#include source=$gatk_seqdict#
#if $optional.sites_only_vcf_output
  $optional.sites_only_vcf_output
#end if

#if $common.tmp_dir
  --tmp-dir $common.tmp_dir
#end if

#if $optional.tranches_file
  --tranches-file $optional.tranches_file
#end if

#if $optional.truth_sensitivity_filter_level
  --truth-sensitivity-filter-level $optional.truth_sensitivity_filter_level
#end if

#if $optional.use_allele_specific_annotations
  $optional.use_allele_specific_annotations
#end if

#if $common.use_jdk_deflater
  $common.use_jdk_deflater
#end if

#if $common.use_jdk_inflater
  $common.use_jdk_inflater
#end if

#include source=$gatk_input_multi#
#if $common.verbosity
  --verbosity $common.verbosity
#end if
]]></command>
  <inputs>
    <param name="recal_file" argument="--recal-file" type="data" optional="false" format="vcf,vcf_bgzip" label="Recal File" help="The input recal file used by ApplyVQSR. "/>
    <expand macro="vcf_input_params_multi"/>
    <expand macro="gzip_vcf_params"/>
    <section name="optional" title="Optional Parameters" expanded="False">
      <expand macro="gatk_ints"/>
      <expand macro="ref_sel"/>
      <param name="arguments_file" argument="--arguments_file" type="data" optional="true" format="txt" label="Arguments_File" help="read one or more arguments files and add them to the command line. "/>
      <param name="cloud_index_prefetch_buffer" argument="--cloud-index-prefetch-buffer" type="integer" optional="true" value="-1" label="Cloud Index Prefetch Buffer" help="Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. "/>
      <param name="cloud_prefetch_buffer" argument="--cloud-prefetch-buffer" type="integer" optional="true" value="40" label="Cloud Prefetch Buffer" help="Size of the cloud-only prefetch buffer (in MB; 0 to disable). "/>
      <param name="disable_bam_index_caching" argument="--disable-bam-index-caching" type="boolean" truevalue="--disable-bam-index-caching" falsevalue="" optional="true" checked="false" label="Disable Bam Index Caching" help="If true, don&amp;apos;t cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified. "/>
      <param name="disable_sequence_dictionary_validation" argument="--disable-sequence-dictionary-validation" type="boolean" truevalue="--disable-sequence-dictionary-validation" falsevalue="" optional="true" checked="false" label="Disable Sequence Dictionary Validation" help="If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!. "/>
      <param name="exclude_filtered" argument="--exclude-filtered" type="boolean" truevalue="--exclude-filtered" falsevalue="" optional="true" checked="false" label="Exclude Filtered" help="Don&amp;apos;t output filtered loci after applying the recalibration. "/>
      <param name="gcs_max_retries" argument="--gcs-max-retries" type="integer" optional="true" value="20" label="Gcs Max Retries" help="If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection. "/>
      <param name="ignore_all_filters" argument="--ignore-all-filters" type="boolean" truevalue="--ignore-all-filters" falsevalue="" optional="true" checked="false" label="Ignore All Filters" help="If specified, the variant recalibrator will ignore all input filters. Useful to rerun the VQSR from a filtered output file. "/>
      <repeat name="ignore_filter_rpt" default="1" title="Ignore Filter">
        <param name="ignore_filter" argument="--ignore-filter" type="text" optional="true" value="" label="Ignore Filter" help="If specified, the recalibration will be applied to variants marked as filtered by the specified filter name in the input VCF file. For this to work properly, the --ignore-filter argument should also be applied to the VariantRecalibration command."/>
      </repeat>
      <param name="interval_merging_rule" argument="--interval-merging-rule" type="select" optional="true" label="Interval Merging Rule" help="Interval merging rule for abutting intervals. By default, the program merges abutting intervals (i.e. intervals that are directly side-by-side but do not&#10; actually overlap) into a single continuous interval. However you can change this behavior if you want them to be&#10; treated as separate intervals instead.">
        <option selected="true" value="ALL">ALL</option>
        <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
      </param>
      <param name="mode" argument="--mode" type="select" optional="true" label="Mode" help="Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously. ">
        <option selected="true" value="SNP">SNP</option>
        <option value="INDEL">INDEL</option>
        <option value="BOTH">BOTH</option>
      </param>
      <param name="sites_only_vcf_output" argument="--sites-only-vcf-output" type="boolean" truevalue="--sites-only-vcf-output" falsevalue="" optional="true" checked="false" label="Sites Only Vcf Output" help="If true, don&amp;apos;t emit genotype fields when writing vcf file output. "/>
      <param name="tranches_file" argument="--tranches-file" type="data" optional="true" format="txt" label="Tranches File" help="The input tranches file describing where to cut the data. "/>
      <param name="truth_sensitivity_filter_level" argument="--truth-sensitivity-filter-level" type="float" optional="true" value="" label="Truth Sensitivity Filter Level" help="The truth sensitivity level at which to start filtering. "/>
      <param name="use_allele_specific_annotations" argument="--use-allele-specific-annotations" type="boolean" truevalue="--use-allele-specific-annotations" falsevalue="" optional="true" checked="false" label="Use Allele Specific Annotations" help="If specified, the tool will attempt to apply a filter to each allele based on the input tranches and allele-specific .recal file. Filter the input file based on allele-specific recalibration data.  See tool docs for site-level and allele-level filtering details.&#10;  Requires a .recal file produced using an allele-specific run of VariantRecalibrator."/>
    </section>
    <section name="advanced" title="Advanced Parameters" expanded="False">
      <param name="lod_score_cutoff" argument="--lod-score-cutoff" type="float" optional="true" value="" label="Lod Score Cutoff" help="The VQSLOD score below which to start filtering. "/>
    </section>
    <section name="common" title="Common Parameters" expanded="False">
      <expand macro="gatk_excl_ints"/>
      <expand macro="gatk_bam_req_params_opt"/>
      <expand macro="seq_dict_sel"/>
      <param name="add_output_sam_program_record" argument="--add-output-sam-program-record" type="boolean" truevalue="--add-output-sam-program-record" falsevalue="" optional="true" checked="true" label="Add Output Sam Program Record" help="If true, adds a PG tag to created SAM/BAM/CRAM files. "/>
      <param name="add_output_vcf_command_line" argument="--add-output-vcf-command-line" type="boolean" truevalue="--add-output-vcf-command-line" falsevalue="" optional="true" checked="true" label="Add Output Vcf Command Line" help="If true, adds a command line header line to created VCF files. "/>
      <repeat name="disable_read_filter_rpt" default="1" title="Disable Read Filter">
        <param name="disable_read_filter" argument="--disable-read-filter" type="text" optional="true" value="" label="Disable Read Filter" help="Read filters to be disabled before analysis. "/>
      </repeat>
      <param name="disable_tool_default_read_filters" argument="--disable-tool-default-read-filters" type="boolean" truevalue="--disable-tool-default-read-filters" falsevalue="" optional="true" checked="false" label="Disable Tool Default Read Filters" help="Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on). "/>
      <param name="gatk_config_file" argument="--gatk-config-file" type="data" optional="true" format="txt" label="Gatk Config File" help="A configuration file to use with the GATK. "/>
      <param name="interval_set_rule" argument="--interval-set-rule" type="select" optional="true" label="Interval Set Rule" help="Set merging approach to use for combining interval inputs. By default, the program will take the UNION of all intervals specified using -L and/or -XL. However, you can&#10; change this setting for -L, for example if you want to take the INTERSECTION of the sets instead. E.g. to&#10; perform the analysis only on chromosome 1 exomes, you could specify -L exomes.intervals -L 1 --interval-set-rule&#10; INTERSECTION. However, it is not possible to modify the merging approach for intervals passed using -XL (they will&#10; always be merged using UNION).&#10;&#10; Note that if you specify both -L and -XL, the -XL interval set will be subtracted from the -L interval set.">
        <option selected="true" value="UNION">UNION</option>
        <option value="INTERSECTION">INTERSECTION</option>
      </param>
      <param name="lenient" argument="--lenient" type="boolean" truevalue="--lenient" falsevalue="" optional="true" checked="false" label="Lenient" help="Lenient processing of VCF files. "/>
      <param name="max_variants_per_shard" argument="--max-variants-per-shard" type="integer" optional="true" value="0" min="0" label="Max Variants Per Shard" help="If non-zero, partitions VCF output into shards, each containing up to the given number of records. "/>
      <param name="QUIET" argument="--QUIET" type="boolean" truevalue="--QUIET" falsevalue="" optional="true" checked="false" label="Quiet" help="Whether to suppress job-summary info on System.err. "/>
      <repeat name="read_filter_rpt" default="1" title="Read Filter">
        <param name="read_filter" argument="--read-filter" type="text" optional="true" value="" label="Read Filter" help="Read filters to be applied before analysis. "/>
      </repeat>
      <param name="read_validation_stringency" argument="--read-validation-stringency" type="select" optional="true" label="Read Validation Stringency" help="Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. ">
        <option value="STRICT">STRICT</option>
        <option value="LENIENT">LENIENT</option>
        <option selected="true" value="SILENT">SILENT</option>
      </param>
      <param name="seconds_between_progress_updates" argument="--seconds-between-progress-updates" type="float" optional="true" value="10.0" label="Seconds Between Progress Updates" help="Output traversal statistics every time this many seconds elapse. "/>
      <param name="tmp_dir" argument="--tmp-dir" type="text" optional="true" value="" label="Tmp Dir" help="Temp directory to use. "/>
      <param name="use_jdk_deflater" argument="--use-jdk-deflater" type="boolean" truevalue="--use-jdk-deflater" falsevalue="" optional="true" checked="false" label="Use Jdk Deflater" help="Whether to use the JdkDeflater (as opposed to IntelDeflater). "/>
      <param name="use_jdk_inflater" argument="--use-jdk-inflater" type="boolean" truevalue="--use-jdk-inflater" falsevalue="" optional="true" checked="false" label="Use Jdk Inflater" help="Whether to use the JdkInflater (as opposed to IntelInflater). "/>
      <param name="verbosity" argument="--verbosity" type="select" optional="true" label="Verbosity" help="Control verbosity of logging. ">
        <option value="ERROR">ERROR</option>
        <option value="WARNING">WARNING</option>
        <option selected="true" value="INFO">INFO</option>
        <option value="DEBUG">DEBUG</option>
      </param>
    </section>
  </inputs>
  <outputs>
    <expand macro="gzip_vcf_output_params"/>
  </outputs>
  <tests/>
  <help><![CDATA[Apply a score cutoff to filter variants based on a recalibration table

This tool performs the second pass in a two-stage process called Variant
Quality Score Recalibration (VQSR). Specifically, it applies filtering
to the input variants based on the recalibration table produced in the
first step by VariantRecalibrator and a target sensitivity value, which
the tool matches internally to a VQSLOD score cutoff based on the
model's estimated sensitivity to a set of true variants.

The filter determination is not just a pass/fail process. The tool
evaluates for each variant which "tranche", or slice of the dataset, it
falls into in terms of sensitivity to the truthset. Variants in tranches
that fall below the specified truth sensitivity filter level have their
FILTER field annotated with the corresponding tranche level. This
results in a callset that is filtered to the desired level but retains
the information necessary to increase sensitivity if needed.

To be clear, please note that by "filtered", we mean that variants
failing the requested tranche cutoff are **marked as filtered** in the
output VCF; they are **not discarded** unless the option to do so is
specified.

Summary of the VQSR procedure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The purpose of variant recalibration is to assign a well-calibrated
probability to each variant call in a call set. These probabilities can
then be used to filter the variants with a greater level of accuracy and
flexibility than can typically be achieved by traditional hard-filter
(filtering on individual annotation value thresholds). The first pass
consists of building a model that describes how variant annotation
values co-vary with the truthfulness of variant calls in a training set,
and then scoring all input variants according to the model. The second
pass simply consists of specifying a target sensitivity value (which
corresponds to an empirical VQSLOD cutoff) and applying filters to each
variant call according to their ranking. The result is a VCF file in
which variants have been assigned a score and filter status.

VQSR is probably the hardest part of the Best Practices to get right, so
be sure to read the `method
documentation <https://software.broadinstitute.org/gatk/guide/article?id=39>`__,
`parameter
recommendations <https://software.broadinstitute.org/gatk/guide/article?id=1259>`__
and
`tutorial <https://software.broadinstitute.org/gatk/guide/article?id=2805>`__
to really understand what these tools do and how to use them for best
results on your own data.

Inputs
~~~~~~

-  The raw input variants to be filtered.
-  The recalibration table file that was generated by the
   VariantRecalibrator tool.
-  The tranches file that was generated by the VariantRecalibrator tool.

Output
~~~~~~

-  A recalibrated VCF file in which each variant of the requested type
   is annotated with its VQSLOD and marked as filtered if the score is
   below the desired quality level.

Usage examples
~~~~~~~~~~~~~~

Applying recalibration/filtering to SNPs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    gatk ApplyVQSR \
      -R Homo_sapiens_assembly38.fasta \
      -V input.vcf.gz \
      -O output.vcf.gz \
      --truth-sensitivity-filter-level 99.0 \
      --tranches-file output.tranches \
      --recal-file output.recal \
      -mode SNP
    

Allele-specific version of the SNP filtering (beta)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

    gatk ApplyVQSR \
      -R Homo_sapiens_assembly38.fasta \
      -V input.vcf.gz \
      -O output.vcf.gz \
      -AS \
      --truth-sensitivity-filter-level 99.0 \
      --tranches-file output.AS.tranches \
      --recal-file output.AS.recal \
      -mode SNP 
    

Note that the tranches and recalibration files must have been produced
by an allele-specific run of VariantRecalibrator. Also note that the
AS_culprit, AS_FilterStatus, and AS_VQSLOD fields will have placeholder
values (NA or NaN) for alleles of a type that have not yet been
processed by ApplyVQSR. The spanning deletion allele (*) will not be
recalibrated because it represents missing data. Its VQSLOD will remain
NaN, and its culprit and FilterStatus will be NA.

Each allele will be annotated by its corresponding entry in the
AS_FilterStatus INFO field annotation. Allele-specific VQSLOD and
culprit are also carried through from VariantRecalibrator, and stored in
the AS_VQSLOD and AS_culprit INFO fields, respectively. The site-level
filter is set to the most lenient of any of the allele filters. That is,
if one allele passes, the whole site will be PASS. If no alleles pass,
the site-level filter will be set to the lowest sensitivity tranche
among all the alleles.

Caveats
~~~~~~~

-  The tranche values used in the example above are only meant to be a
   general example. You should determine the level of sensitivity that
   is appropriate for your specific project. Remember that higher
   sensitivity (more power to detect variants, yay!) comes at the cost
   of specificity (more false negatives, boo!). You have to choose at
   what point you want to set the tradeoff.
-  In order to create the tranche reporting plots (which are only
   generated for SNPs, not indels!) the Rscript executable needs to be
   in your environment PATH (this is the scripting version of R, not the
   interactive version).
]]></help>
  <citations>
    <expand macro="citations"/>
  </citations>
</tool>
