<tool id="cibersort" name="CIBERSORT" version="0.1.0">
    <description>
        Estimate cell type abundance from a mixed population given gene 
        expression data.
    </description>

    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements" />

    @VERSION_CMD@

    <command detect_errors="exit_code"><![CDATA[
        Rscript $run
    ]]></command>

    <configfiles>
        <configfile name="run">
source(paste0("${__tool_directory__}","/CIBERSORT.R"))
library(reshape2)
library(ggplot2)
library(RColorBrewer)

# Define the function used to produce the plots
graph = function(data, type_name, color_name, colors) {
    # Plot the sequential bar plot(s)
    #if $Plots.sequential_axis == "CellType"
    ggplot(data, aes_string(x=type_name, y="EstimatedPercent", fill="Sample")) +
    scale_fill_manual(values = unname(colors)) + 
    #else
    ggplot(data, aes_string(x="Sample", y="EstimatedPercent", fill=type_name)) +
    scale_fill_manual(values = colors) +
    #end if
    geom_bar(stat="identity", position="dodge") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))
    filename = paste(c("CIBERSORT",type_name,color_name,"sequential.png"), collapse="_")
    ggsave(filename)

    # Plot the stacked bar plot(s)
    ggplot(data,aes_string(x="Sample", y="EstimatedPercent", fill=type_name)) +
    geom_bar(stat = "identity", position = "stack") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90)) +
    scale_fill_manual(values = colors) +
    guides(fill=guide_legend(ncol=1))
    filename = paste(c("CIBERSORT",type_name,color_name,"stacked.png"), collapse="_")
    ggsave(filename)
}

# Define the function used to determine color scheme
getColors = function(cellTypes, map=NA, type_col=NA, color_col=NA) {
    if (is.na(map) || is.na(type_col) || is.na(color_col)
        || !(color_col %in% colnames(map))
        || !(type_col %in% colnames(map))) {
        print("Using default colors")
        colorCount = length(cellTypes)
        getPalette = colorRampPalette(brewer.pal(9, "Set3"))
        colors = rev(getPalette(colorCount))
    } else {
        print("Using color mapping")
        colors = setNames(as.character(map[,color_col]), map[,type_col])
    }
    return(colors)
}

# Set up required data
signature = read.csv("$signature_file", header=TRUE, row.names=1, sep="\t")
bulk = as.matrix(read.csv("$expression_file", check.names=FALSE,
                          header=TRUE, row.names=1, sep="\t"))
if ("$Plots.sample_ids" != "") {
    samples = unlist(strsplit("$Plots.sample_ids",","))
} else {
    samples = colnames(bulk)
}

# Run CIBERSORT and write the results to TSV
res = CIBERSORT(signature, bulk,QN=TRUE, absolute=FALSE, abs_method="sig.score")
write.table(res, "$output_tsv", quote=FALSE, sep="\t")

# Prepare the result for cell type mapping and visualization
cols = ncol(signature)
cells = res[,1:cols] *100
cells = cells[samples,,drop=FALSE]
data = melt(cells)
colnames(data) = c("Sample", "CellType", "EstimatedPercent")

# Merge the mapping file if specified
#if $mapping.use_mapping != "no_map"
    groups = read.csv("$mapping.map_file", header=TRUE, sep="\t", row.names=NULL,stringsAsFactors=TRUE)
    merged = merge(data, groups, by="CellType")  
#else
    groups = NA
#end if

# Determine the parameters related to cell type mapping
#if $mapping.use_mapping in ["map_types", "map_both"]
    type_col = "$mapping.type_col"

    # Aggregate cell types to appropriate granularity
    cellTypes = unique(groups[,type_col])
    formula = as.formula(paste0(c("EstimatedPercent ~ Sample + ",type_col)))
    summedData = aggregate(formula, merged, FUN=sum) 
  
    # Sort the cell types for consistent visualization
    summedData[,type_col] = as.character(summedData[,type_col])
    summedData[,type_col] = factor(summedData[,type_col], levels=cellTypes)
    summedData[order(summedData[,type_col]),] 
    data = summedData
#else
    type_col = "CellType"
#end if

# Determine the parameters related to visualization colors
#if $mapping.use_mapping in ["map_color", "map_both"]
    cellTypes = unique(groups[,"$mapping.color_col"])
    color_col = "$mapping.color_col"
#else
    cellTypes = unique(data[,type_col])
    color_col = "DefaultColor"
#end if

# Determine colors and then graph
colors = getColors(cellTypes, map=groups, type_col=type_col, color_col=color_col)
graph(data, type_name=type_col, color_name=color_col, colors=colors)
        </configfile> 
    </configfiles>

    <inputs>
        <param name="signature_file" type="data" format="tsv" label="Gene Signature File" />
        <param name="expression_file" type="data" format="tsv" label="Cohort Gene Expression"
               help="Hugo-named gene expression file" />

        <section name="Plots">
            <param name="sample_ids" type="text" optional="true" label="Sample ID(s)"
                   help="Comma separated list, or all samples if not provided" />
            <param name="sequential_axis" type="select" optional="false" label="Select x-axis for sequential plots">
                <option value="Sample">Group By Sample</option>
                <option value="CellType">Group By Cell Type</option>
            </param>
        </section>

        <conditional name="mapping">
            <param name="use_mapping" type="select" label="Would you like to map cell types/colors?">
                <option value="no_map">Use default cell types and colors</option>
                <option value="map_color">Specify color mapping from default cell types</option>
                <option value="map_types"> Specify cell type mapping</option>
                <option value="map_both">Map colors and cell types</option>
            </param>
            <when value="no_map">
            </when>
            <when value="map_color">
                <param name="map_file" type="data" format="tsv,tabular,text" label="TSV containing cell type map and optional color specification"/>
                <param name="color_col" type="text" label="Name of column specifying colors"/>
            </when>
            <when value="map_types">
                <param name="map_file" type="data" format="tsv,tabular,text" label="TSV containing cell type map and optional color specification"/>
                <param name="type_col" type="text" label="Name of column specifying new cell types"/>
            </when>
            <when value="map_both">
                <param name="map_file" type="data" format="tsv,tabular,text" label="TSV containing cell type map and optional color specification"/>
                <param name="color_col" type="text" label="Name of column specifying colors"/>
                <param name="type_col" type="text" label="Name of column specifying new cell types"/>
            </when>
        </conditional> 
    </inputs>

    <outputs>
        <data name="output_tsv" format="tsv" label="${tool.name} on ${on_string}: TSV" />
        <data name="stacked_plot" label="${tool.name} on ${on_string}: Stacked Bar Chart">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)_stacked\.png" format="png" visible="true"/>
        </data>
        <data name="seq_plot" label="${tool.name} on ${on_string}: Sequential Bar Chart">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)_sequential\.png" format="png" visible="true"/>
        </data>
    </outputs>

    <help><![CDATA[
        Provide TSV gene expression data and run through CIBERSORT for immune 
        population estimation. Specify one or more samples from the expression 
        matrix to perform the analysis on, otherwise analysis will be performed 
        on the entire cohort. Produces a stacked bar plot, grouped by sample, 
        and a histogram, grouped either by sample or cell type.

        Optionally, also provide a mapping file to change/condense cell type 
        names and select colors. If a mapping file is provided, you can map
        either the cell types, the colors, or both. If cell types are not mapped, 
        then the default CIBERSORT cell types will be used. If colors are not 
        mapped, then a default color palette is generated.
    ]]></help>

    <expand macro="citations" />

</tool>
