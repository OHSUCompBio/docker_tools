<?xml version="1.0"?>
<macros>
    <token name="@VERSION@">4.0.5.1</token>
    <token name="@WRAPPER_VERSION@">@VERSION@+galaxy</token>

    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@VERSION@">gatk4</requirement>
            <requirement type="package" version="0.2.5">tabix</requirement>
            <yield />
        </requirements>
    </xml>

    <!--Hacky way to determine GATK version, for display in tool info-->
    <xml name="version_cmd">
        <version_command>gatk SortSam --version 2>&amp;1 | grep Version | cut -d ':' -f 2</version_command>
    </xml>

    <!--Command token, java options should not be hard coded here.-->
    <token name="@CMD_BEGIN@">gatk --java-options "-Xmx24g -Xms2g"</token>


    <!--GATK tool BAM input-->
    <xml name="gatk_req_params">
        <param name="input" type="data" format="bam,sam" label="Input BAM/SAM/CRAM file" />
    </xml>

    <template name="gatk_bam_input">
        --input input.bam
    </template>

    <template name="bam_index"><![CDATA[
        export PATH="/home/exacloud/lustre1/galaxydev/galaxy/tools/gatk4_auto/38_pipeline/commands/samtools-1.9:\${PATH}" &&
        #if $input.is_of_type("bam")
            ln -s $input input.bam &&
            samtools index input.bam &&
        #else
            ln -s $input input.sam &&
            samtools view -bS input.sam -o input.bam &&
            samtools index input.bam &&
        #end if
    ]]></template>

    <!--Picard tool BAM input-->
    <template name="picard_bam_input">
        --INPUT input.bam
    </template>

    <template name="picard_bam_index"><![CDATA[
        export PATH="/home/exacloud/lustre1/galaxydev/galaxy/tools/gatk4_auto/38_pipeline/commands/samtools-1.9:\${PATH}" &&
        #if $input.is_of_type("bam")
            ln -s $INPUT input.bam &&
            samtools index input.bam &&
        #else
            ln -s $INPUT input.sam &&
            samtools view -bS input.sam -o input.bam &&
            samtools index input.bam &&
        #end if
    ]]></template>

    <!--Interval Macros-->
    <xml name="gatk_ints">
        <conditional name="ival_type">
            <param name="ival_type_sel" type="select" label="Choose Genomic Interval Source">
                <option value="ival_file" selected="true">Interval File</option>
                <option value="ival_text" selected="false">Interval Text Input</option>
            </param>
            <when value="ival_file">
                <param name="intervals" argument="--intervals" type="data" optional="true" format="bed,vcf,gatk_interval" label="Intervals File" help="One or more genomic intervals over which to operate"/>
                <param name="interval_padding" argument="--interval-padding" type="integer" optional="true" value="0" label="Interval Padding" help="Amount of padding (in bp) to add to each interval you are including."/>
            </when>
            <when value="ival_text">
                <param name="intervals" argument="--intervals" type="text" optional="true" label="Intervals Text Input" help="One or more genomic intervals over which to operate.  Enter in chrom:start-stop format."/>
                <param name="interval_padding" argument="--interval-padding" type="integer" optional="true" value="0" label="Interval Padding" help="Amount of padding (in bp) to add to each interval you are including."/>
            </when>
        </conditional>
    </xml>

    <template name="gatk_ints_chth">
    #if str($ival_type.ival_type_sel) == "ival_file"
        #if $ival_type.intervals
            #if $ival_type.intervals.is_of_type("gatk_interval")
                --intervals intervals.interval_list
            #end if
            #if $ival_type.intervals.is_of_type("bed")
                --intervals intervals.bed
            #end if
            #if $ival_type.intervals.is_of_type("vcf")
                --intervals intervals.vcf
            #end if
        #end if
    #else
        #if $ival_type.intervals
            --intervals "${ival_type.intervals}"
        #end if
    #end if
    #if $ival_type.interval_padding
        --interval-padding "${ival_type.interval_padding}"
    #end if
    </template>

    <template name="pre_gatk_ints_chth"><![CDATA[
    #if str($ival_type.ival_type_sel) == "ival_file"
        #if $ival_type.intervals
            #if $ival_type.intervals.is_of_type("gatk_interval")
                ln -s $ival_type.intervals intervals.interval_list &&
            #end if
            #if $ival_type.intervals.is_of_type("bed")
                ln -s $ival_type.intervals intervals.bed &&
            #end if
            #if $ival_type.intervals.is_of_type("vcf")
                ln -s $ival_type.intervals intervals.vcf &&
            #end if
         #end if
    #end if
    ]]></template>


    <!--Exclude Intervals-->
    <xml name="gatk_excl_ints">
        <conditional name="excl_ival_type">
            <param name="excl_ival_type_sel" type="select" label="Choose Genomic Interval Exclusion Source">
                <option value="excl_ival_file" selected="true">Exclude Interval File</option>
                <option value="excl_ival_text" selected="false">Exclude Interval Text Input</option>
            </param>
            <when value="excl_ival_file">
                <param name="exclude_intervals" argument="--exclude-intervals" type="data" optional="true" format="bed,vcf,gatk_interval" label="Exclude Intervals File" help="One or more genomic intervals to exclude from processing"/>
                <param name="interval_exclusion_padding" argument="--interval-exclusion-padding" type="integer" optional="true" value="0" label="Interval Exclusion Padding" help="Amount of padding (in bp) to add to each interval you are excluding."/>
            </when>
            <when value="excl_ival_text">
                <param name="exclude_intervals" argument="--exclude-intervals" type="text" optional="true" label="Exclude Intervals Text Input" help="One or more genomic intervals to exclude from processing.  Enter in chrom:start-stop format."/>
                <param name="interval_exclusion_padding" argument="--interval-exclusion-padding" type="integer" optional="true" value="0" label="Interval Exclusion Padding" help="Amount of padding (in bp) to add to each interval you are excluding."/>
            </when>
        </conditional>
    </xml>

    <template name="gatk_excl_ints_chth">
    #if str($excl_ival_type.excl_ival_type_sel) == "excl_ival_file"
        #if $excl_ival_type.exclude_intervals
            #if $excl_ival_type.exclude_intervals.is_of_type("gatk_interval")
                --exclude-intervals excl_intervals.interval_list
            #end if
            #if $excl_ival_type.exclude_intervals.is_of_type("bed")
                --exclude-intervals excl_intervals.bed
            #end if
            #if $excl_ival_type.exclude_intervals.is_of_type("vcf")
                --exclude-intervals excl_intervals.vcf
            #end if
        #end if
    #else
        #if $excl_ival_type.exclude_intervals
            --exclude-intervals "${excl_ival_type.exclude_intervals}"
        #end if
    #end if
    #if $excl_ival_type.interval_exclusion_padding
        --interval-exclusion-padding "${excl_ival_type.interval_exclusion_padding}"
    #end if
    </template>

    <template name="pre_gatk_excl_ints_chth"><![CDATA[
    #if str($excl_ival_type.excl_ival_type_sel) == "excl_ival_file"
        #if $excl_ival_type.exclude_intervals
            #if $excl_ival_type.exclude_intervals.is_of_type("gatk_interval")
                ln -s $excl_ival_type.exclude_intervals excl_intervals.interval_list &&
            #end if
            #if $excl_ival_type.exclude_intervals.is_of_type("bed")
                ln -s $excl_ival_type.exclude_intervals excl_intervals.bed &&
            #end if
            #if $excl_ival_type.exclude_intervals.is_of_type("vcf")
                ln -s $excl_ival_type.exclude_intervals excl_intervals.vcf &&
            #end if
         #end if
    #end if
    ]]></template>


    <!--Macros for multiple input tools.  List[File] in GATK json.-->
    <template name="vcf_tabix_multi"><![CDATA[
        #for $num, $file in enumerate($input)
            #set datatype = $file.datatype
            #if $file.is_of_type("vcf_bgzip")
                ln -s $file input${num}.vcf.gz &&
                tabix input${num}.vcf.gz &&
                @CMD_BEGIN@ IndexFeatureFile -F input${num}.vcf.gz 2>> "${log}" &&
            #else
                ln -s $file input${num}.vcf &&
            #end if
        #end for
    ]]></template>

    <template name="vcf_input_multi_picard"><![CDATA[
        #for $num, $file in enumerate($input)
            #if $file.is_of_type("vcf_bgzip")
                --INPUT input${num}.vcf.gz
            #else
                --INPUT input${num}.vcf
            #end if
        #end for
    ]]></template>

    <template name="vcf_input_multi"><![CDATA[
        #for $num, $file in enumerate($input)
            #if $file.is_of_type("vcf_bgzip")
                --input input${num}.vcf.gz
            #else
                --input input${num}.vcf
            #end if
        #end for
    ]]></template>

    <template name="gatk_input_multi"><![CDATA[
        #for $num, $file in enumerate($variant)
            #if $file.is_of_type("vcf_bgzip")
                -V input${num}.vcf.gz
            ###elif $file.is_of_type("txt")
                ###-V input${num}.list
            #else
                -V input${num}.vcf
            #end if
        #end for
    ]]></template>

    <template name="gatk_tabix_multi"><![CDATA[
        #for $num, $file in enumerate($variant)
            #set datatype = $file.datatype
            #if $file.is_of_type("vcf_bgzip")
                ln -s $file input${num}.vcf.gz &&
                tabix input${num}.vcf.gz &&
                @CMD_BEGIN@ IndexFeatureFile -F input${num}.vcf.gz 2>> "${log}" &&
            ###elif $file.is_of_type("txt")
                ###ln -s $file input${num}.list &&
            #else
                ln -s $file input${num}.vcf &&
            #end if
        #end for
    ]]></template>

    <xml name="vcf_input_params_multi">
        <param name="input" type="data" multiple="true" format="vcf,vcf_bgzip" label="Input VCF file" help="Input VCF(s) to be sorted. Multiple inputs must have the same sample names (in order)"/>
    </xml>

    <!--Picard single input tools-->
    <template name="vcf_tabix"><![CDATA[
        #set datatype = $input.datatype
        #if $input.is_of_type("vcf_bgzip")
            ln -s $input input.vcf.gz &&
            tabix input.vcf.gz &&
            @CMD_BEGIN@ IndexFeatureFile -F input.vcf.gz 2>> "${log}" &&
        #else
            ln -s $input input.vcf &&
        #end if
    ]]></template>

    <template name="gatk_tabix"><![CDATA[
        #set datatype = $variant.datatype
        #if $variant.is_of_type("vcf_bgzip")
            ln -s $variant input.vcf.gz &&
            tabix input.vcf.gz &&
            @CMD_BEGIN@ IndexFeatureFile -F input.vcf.gz 2>> "${log}" &&
        #else
            ln -s $variant input.vcf &&
            gatk IndexFeatureFile -F input.vcf &&
        #end if
    ]]></template>

    <template name="vcf_input_picard"><![CDATA[
        #if $input.is_of_type("vcf_bgzip")
            --INPUT input.vcf.gz
        #else
            --INPUT input.vcf
        #end if
    ]]></template>

    <template name="vcf_input"><![CDATA[
        #if $input.is_of_type("vcf_bgzip")
            --input input.vcf.gz
        #else
            --input input.vcf
        #end if
    ]]></template>

    <template name="gatk_input"><![CDATA[
        #if $variant.is_of_type("vcf_bgzip")
            --variant input.vcf.gz
        #else
            --variant input.vcf
        #end if
    ]]></template>

    <template name="gatk_gvcf_tabix"><![CDATA[
        #if $variant
            ln -s $variant input.g.vcf &&
        #end if
    ]]></template>

    <template name="gatk_gvcf_input"><![CDATA[
        --variant input.g.vcf
    ]]></template>

    <xml name="gatk_gvcf_input_params">
	    <param name="variant" type="data" multiple="false" format="vcf,vcf_bgzip" label="Input gVCF file" help=""/>
    </xml>

    <xml name="vcf_input_params">
        <param name="input" type="data" multiple="false" format="vcf,vcf_bgzip" label="Input VCF file" help="Input VCF(s) to be sorted. Multiple inputs must have the same sample names (in order)"/>
    </xml>

    <xml name="gatk_vcf_input_params">
        <param name="variant" type="data" multiple="false" format="vcf,vcf_bgzip" label="Input VCF file" help="A VCF file containing variants."/>
    </xml>

    <xml name="gatk_vcf_input_params_multi">
        <param name="variant" type="data" multiple="true" format="vcf,vcf_bgzip,txt" label="Input VCF file(s)" help="A VCF file containing variants or a list of VCFs. Can be specified multiple times."/>
    </xml>

    <xml name="gatk_req_params">
        <param name="input" type="data" format="bam,sam,cram" label="Input BAM/SAM/CRAM file" />
    </xml>

    <!--HDF5 Inputs-->

    <xml name="hdf5_input">
        <param name="input" type="data" format="h5,tabular" label="Input TSV or HDF5" help="Input TSV or HDF5 file containing integer read counts in genomic intervals for a single case sample (output of CollectReadCounts)." />
    </xml>

    <template name="hdf5_input_chth"><![CDATA[
        --input "${input}"
    ]]></template>

    <template name="hdf5_output_chth">
        --output "${output}"
    </template>

    <xml name="hdf5_output">
        <data format="h5" name="output" label="${tool.name} on ${on_string}: HDF5" help="Output file for read counts." />
    </xml>

    <!--Output specific to ModelSegments.  Files created based on prefix, so force that to be what we want, then pull important files with from_work_dir.-->
    <!--${SAMPLE}.cr.seg-->
    <!--${SAMPLE}.modelFinal.seg-->
    <template name="modelsegments_chth"><![CDATA[
        --output "."
        --output-prefix "modelsegments"
    ]]></template>

    <xml name="modelsegments_output">
        <data format="tabular" name="cr_seg" label="${tool.name} on ${on_string}: cr.seg" help="Copy-ratio segments." from_work_dir="modelsegments.cr.seg"/>
        <data format="tabular" name="modelfinal_seg" label="${tool.name} on ${on_string}: modelFinal.seg" help="Modeled Segments" from_work_dir="modelsegments.modelFinal.seg"/>
    </xml>

    <!--deltaMAD.txt-->
    <!--denoisedLimit4.png-->
    <!--denoisedMAD.txt-->
    <!--denoised.png-->
    <!--scaledDeltaMAD.txt-->
    <!--modeled.png-->
    <!--standardizedMAD.txt-->

    <template name="plotmodeledsegments_chth"><![CDATA[
        --output "."
        --output-prefix "plotmodeledsegments"
    ]]></template>

    <xml name="plotmodeledsegments_output">
        <data format="png" name="modeled_png" label="${tool.name} on ${on_string}: modeled.png" help="Copy-Ratio Plot" from_work_dir="plotmodeledsegments.modeled.png"/>
    </xml>

    <!--Common Picard options-->
    <template name="picard_opts">
        #if $picard_adv.arguments_file
            --arguments_file ${picard_adv.arguments_file}
        #end if
        #if $picard_adv.COMPRESSION_LEVEL
        --COMPRESSION_LEVEL ${picard_adv.COMPRESSION_LEVEL}
        #end if
        #if $picard_adv.GA4GH_CLIENT_SECRETS
            --GA4GH_CLIENT_SECRETS ${picard_adv.GA4GH_CLIENT_SECRETS}
        #end if
        #if $picard_adv.MAX_RECORDS_IN_RAM
        --MAX_RECORDS_IN_RAM ${picard_adv.MAX_RECORDS_IN_RAM}
        #end if
        #if $picard_adv.VALIDATION_STRINGENCY
        --VALIDATION_STRINGENCY ${picard_adv.VALIDATION_STRINGENCY}
        #end if
        #if $picard_adv.VERBOSITY
        --VERBOSITY ${picard_adv.VERBOSITY}
        #end if
        #if $picard_adv.TMP_DIR
        --TMP_DIR ${picard_adv.TMP_DIR}
        #end if
        ${picard_adv.CREATE_MD5_FILE}
        ${picard_adv.USE_JDK_DEFLATER}
        ${picard_adv.USE_JDK_INFLATER}
    </template>

    <xml name="picard_params">
        <section name="picard_adv" title="Advanced Picard Options (Only change these if you know what you're doing.)" expanded="False">
            <param argument="--arguments_file" type="data" optional="true" format="txt" label="Arguments File" help="read one or more arguments files and add them to the command line" />
            <param argument="--COMPRESSION_LEVEL" type="integer" optional="true" min="1" max="9" label="Compression Level" help="Compression level for all compressed files created (e.g. BAM and VCF). Default value is 5" />
            <param argument="--CREATE_MD5_FILE" truevalue="--CREATE_MD5_FILE" falsevalue="" type="boolean" optional="true" checked="false" label="Create MD5 File" help="Whether to create an MD5 digest for any BAM or FASTQ files created." />
            <param argument="--GA4GH_CLIENT_SECRETS" type="data" format="json" optional="true" label="Ga4Gh Client Secrets" help="Google Genomics API client_secrets.json file path." />
            <param argument="--MAX_RECORDS_IN_RAM" type="integer" optional="true" label="Max Records In Ram" help="When writing files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort the file, and increases the amount of RAM needed. Default value is 500,000" />
            <param argument="--TMP_DIR" type="text" optional="true" label="Tmp Dir" help="One or more directories with space available to be used by this program for temporary storage of working files.  Keep in mind, you must be able to access this directory from either your user, or from the Galaxy user, depending on your configuration." />
            <param argument="--USE_JDK_DEFLATER" truevalue="--USE_JDK_DEFLATER" falsevalue="" type="boolean" optional="true" checked="false" label="Use Jdk Deflater" help="Use the JDK Deflater instead of the Intel Deflater for writing compressed output" />
            <param argument="--USE_JDK_INFLATER" truevalue="--USE_JDK_INFLATER" falsevalue="" type="boolean" optional="true" checked="false" label="Use Jdk Inflater" help="Use the JDK Inflater instead of the Intel Inflater for reading compressed input" />
            <param argument="--VALIDATION_STRINGENCY" type="select" optional="true" label="Validation Stringency" help="Validation stringency for all SAM files read by this program.  Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value is STRICT." >
                <option value="STRICT" selected="false">STRICT</option>
                <option value="LENIENT" selected="false">LENIENT</option>
                <option value="SILENT" selected="false">SILENT</option>
            </param>
            <param argument="--VERBOSITY" type="select" optional="true" label="Verbosity" help="Control verbosity of logging. Default value is INFO." >
                <option value="ERROR" selected="false">ERROR</option>
                <option value="WARNING" selected="false">WARNING</option>
                <option value="INFO" selected="false">INFO</option>
                <option value="DEBUG" selected="false">DEBUG</option>
            </param>
        </section>
    </xml>

    <!--Provides option to create gzipped output for VCXF files-->
    <xml name="gzip_vcf_params">
        <param name="gzipped_output" type="boolean" checked="true" label="GZIP Output?" help="If you would like gzipped output, check this box.  In general, it would be preferable to do this, unless your downstream tool does not support handling of gzipped files." />
    </xml>

    <!--Output related Picard options-->
    <xml name="gzip_vcf_output_params">
        <data format="vcf" name="output_vcf" label="${tool.name} on ${on_string}: vcf" from_work_dir="output.vcf" >
			<filter>not gzipped_output</filter>
		</data>
		<data format="vcf_bgzip" name="output_vcf_bgzip" label="${tool.name} on ${on_string}: vcf_bgzip" from_work_dir="output.vcf.gz" >
			<filter>gzipped_output</filter>
		</data>
    </xml>
	
	<xml name="gzip_vcf_output_params_apply_vqsr">
        <data format="vcf" name="output_vcf" label="${tool.name} on ${on_string}: $optional.mode vcf" from_work_dir="output.vcf" >
			<filter>not gzipped_output</filter>
		</data>
		<data format="vcf_bgzip" name="output_vcf_bgzip" label="${tool.name} on ${on_string}: $optional.mode vcf_bgzip" from_work_dir="output.vcf.gz" >
			<filter>gzipped_output</filter>
		</data>
    </xml>


    <!--These are the same, other than the capitalization of output, so maybe a better way to do this.-->
    <template name="picard_vcf_output_opts">
        #if $gzipped_output
			--OUTPUT output.vcf.gz
		#else
			--OUTPUT output.vcf
		#end if
    </template>

    <template name="vcf_output_opts">
        #if $gzipped_output
			--output output.vcf.gz
		#else
			--output output.vcf
		#end if
    </template>

    <xml name="picard_output_params">
        <data format="txt" name="output_md5" label="${tool.name} on ${on_string}: md5sum(txt)" from_work_dir="output.bam.md5" >
			<filter>picard_adv['CREATE_MD5_FILE']</filter>
		</data>
    </xml>

    <!--Reference options for Picard type tools.-->
    <xml name="ref_sel">
        <conditional name="reference_source">
            <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
                <option value="cached">Locally cached</option>
                <option value="history">History</option>
                <option value="no_ref" selected="true">Do not pass</option>
            </param>
            <when value="cached">
                <param name="reference_sequence" type="select" label="Reference" help="Reference sequence file." >
                    <options from_data_table="bwa_indexes" >
                        <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file" />
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="reference_sequence" type="data" format="fasta" label="Reference" help="Reference sequence file." />
            </when>
        </conditional>
    </xml>

    <template name="picard_ref_opts_opt">
        #if $optional.reference_source.reference_source_selector != "no_ref"
            #if $optional.reference_source.reference_source_selector != "history"
                --REFERENCE_SEQUENCE ${optional.reference_source.reference_sequence.fields.path}
            #else
                --REFERENCE_SEQUENCE ${optional.reference_source.reference_sequence}
            #end if
        #end if
    </template>

    <template name="picard_ref_opts">
        #if $reference_source.reference_source_selector != "no_ref"
            #if $reference_source.reference_source_selector != "history"
                --REFERENCE_SEQUENCE ${reference_source.reference_sequence.fields.path}
            #else
                --REFERENCE_SEQUENCE ${reference_source.reference_sequence}
            #end if
        #end if
    </template>

    <template name="ref_opts">
        #if $reference_source.reference_source_selector != "no_ref"
            #if $reference_source.reference_source_selector != "history"
                --reference ${reference_source.reference_sequence.fields.path}
            #else
                --reference ${reference_source.reference_sequence}
            #end if
        #end if
    </template>

    <template name="ref_opts_opt">
        #if $optional.reference_source.reference_source_selector != "no_ref"
            #if $optional.reference_source.reference_source_selector != "history"
                --reference ${optional.reference_source.reference_sequence.fields.path}
            #else
                --reference ${optional.reference_source.reference_sequence}
            #end if
        #end if
    </template>


    <!--Sequence dictionary selection options for Picard type tools-->
    <xml name="seq_dict_sel">
        <conditional name="seqdict_source">
            <param name="seqdict_source_selector" type="select" label="Choose the source for the sequence dictionary">
                <option value="cached">Locally cached</option>
                <option value="history">History</option>
                <option value="no_seq_dict" selected="true">Do not pass</option>
            </param>
            <when value="cached">
                <param name="seqdict_sequence" type="select" label="Sequence Dictionary" help="Sequence dictionary file." >
                    <options from_data_table="all_fasta" >
                        <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file" />
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="seqdict_sequence" type="data" format="txt" label="Sequence Dictionary" help="Sequence dictionary file. Must be in dict format." />
            </when>
        </conditional>
    </xml>

    <template name="picard_seqdict_opts">
        #if $optional.seqdict_source.seqdict_source_selector != "no_seq_dict"
            #if $optional.seqdict_source.seqdict_source_selector != "history"
                #set seq_dict_loc = ''.join($optional.seqdict_source.seqdict_sequence.fields.path.split('.')[:-1]) + '.dict'
                --SEQUENCE_DICTIONARY $seq_dict_loc
            #else
                --SEQUENCE_DICTIONARY ${optional.seqdict_source.seqdict_sequence}
            #end if
        #end if
    </template>

    <template name="gatk_seqdict">
        #if $seqdict_source.seqdict_source_selector != "no_seq_dict"
            #if $seqdict_source.seqdict_source_selector != "history"
                #set seq_dict_loc = ''.join($seqdict_source.seqdict_sequence.fields.path.split('.')[:-1]) + '.dict'
                --sequence-dictionary $seq_dict_loc
            #else
                --sequence-dictionary ${seqdict_source.seqdict_sequence}
            #end if
        #end if
    </template>

    <!--Citations-->
    <xml name="citations">
        <citation type="doi">10.1101/gr.107524.110</citation>
        <citation type="doi">10.1038/ng.806</citation>
        <citation type="doi">10.1002/0471250953.bi1110s43</citation>
        <citation type="doi">10.1101/201178</citation>
        <yield />
    </xml>
  
  
    <!--Known Variants-->
    <template name="known_sites_opts">
      #for $num, $i in enumerate($known_sites)
        --known-sites ${i.site}
      #end for
    </template>
    <xml name="known_sites_params">
      <repeat name="known_sites" title="Known Sites">
          <param name="site" type="select" label="Known Variants">
            <options from_data_table="vcf_indexes">
                  <validator type="no_options" message="No indexed vcfs available."/>
            </options>
          </param>
      </repeat>
    </xml>

    <!--BAM output-->
    <template name="bam_output_opts">
      --output "${output}"
    </template>
    <xml name="bam_output_params">
      <data format="bam" name="output" label="${tool.name} on ${on_string}: BAM"/>
    </xml>
  
    <!--Log output-->
    <template name="log_opts">
      2>> "${log}"
    </template>
    <xml name="log_param">
      <data format="txt" name="log" label="${tool.name} on ${on_string}: Log"/>
    </xml>

    <!--The common lacking params-->
    <xml name="missing_params">
      <param name="QUIET" type="boolean" checked="false" label="QUIET?"/>
      <param name="read_index" type="data" label="Read indices" optional="true"/>
    </xml>
  
    <!--Use a GenomicsDB database as input-->
    <template name="db_pre_opts"><![CDATA[
      #if $vcf_or_db.input_type == "DB":
        #for $num, $file in enumerate($vcf_or_db.db_variants)
          #set datatype = $file.datatype
          #if $file.is_of_type("vcf_bgzip")
                ln -s $file input${num}.vcf.gz &&
                tabix input${num}.vcf.gz &&
                @CMD_BEGIN@ IndexFeatureFile -F input${num}.vcf.gz 2>> "${log}" &&
          #else
                ln -s $file input${num}.vcf &&
          #end if
        #end for
        @CMD_BEGIN@ GenomicsDBImport
        #for $num, $file in enumerate($db_variants)
          #if $file.is_of_type("vcf_bgzip")
                -V input${num}.vcf.gz
            #else
                -V input${num}.vcf
            #end if
        #end for
        #include source=$gatk_ints_chth#
        --genomicsdb-workspace-path db_directory
        $vcf_or_db.extra_params
        #include source=$log_opts# 
        &&
      #elif $vcf_or_db.input_type == "prev_DB": 
        cp $vcf_or_db.genomics_db genomics_db.tar &&
        tar -xopf genomics_db.tar &&
      #end if
      #if $vcf_or_db.input_type == "gvcf":
        echo $vcf_or_db.variant &&
        #set datatype = $vcf_or_db.variant.datatype
        #if $vcf_or_db.variant.is_of_type("vcf_bgzip")
            ln -s $vcf_or_db.variant input.vcf.gz &&
            tabix input.vcf.gz &&
            @CMD_BEGIN@ IndexFeatureFile -F input.vcf.gz 2>> "${log}" &&
        #else
            ln -s $vcf_or_db.variant input.vcf &&
            gatk IndexFeatureFile -F input.vcf &&
        #end if
      #end if
     ]]></template>
  
  
    <template name="db_opts">
      #if $vcf_or_db.input_type != "gvcf":
        -V gendb://db_directory
      #end if
      #if $vcf_or_db.input_type == "gvcf":
        #if $vcf_or_db.variant.is_of_type("vcf_bgzip")
            --variant input.vcf.gz
        #else
            --variant input.vcf
        #end if
      #end if
   </template>
  
    <xml name="db_params">
      <conditional name="vcf_or_db">
        <param name="input_type" type="select" label="GVCF input or GenomicsDB database?" help="Select GVCF if you have a single VCF or GVCF input. Choose Create GenomicsDB Database to input multiple vcfs and create a GenomicsDB database before genotypeing (intervals are required for this option). Only select GenomicsDB Database if the database in question is a directory or tar file. As of January 2019 the GenomicsDB tool produces a GVCF NOT a GenomicsDB database.">
          <option value="gvcf" selected="true">GVCF</option>
          <option value="DB">Create GenomicsDB Database</option>
          <option value="prev_DB">GenomicsDB Database</option>
        </param>
        <when value="DB">
          <param name="db_variants" type="data" format="vcf,vcf_bgzip" multiple="true" label="VCFs to Import with GenomicsDB"/>
          <param name="extra_params" type="text" label="Additional GenomicsDBImport Arguments" help="DO NOT ADD UNLESS YOU KNOW WHAT YOU ARE DOING. If there are additional arguments you wish to add to the GenomicsDBImport command, add them here as you would wish to see them added to the command line. eg. --reader-threads 2." optional="true"/>
        </when>
        <when value="prev_DB">
          <param name="genomics_db" type="data" format="tar" label="GenomicsDB Database"/>
        </when>
        <when value="gvcf">
          <expand macro="gatk_gvcf_input_params"/>
        </when>
      </conditional>
    </xml>
    <!--VQSR-->
    <template name="vqsr_opts"><![CDATA[
      #for $num, $set in enumerate($resources)
        -resource "${set.resource_name}",known="${set.known}",training="${set.training}",truth="${set.truth}",prior="${set.prior}":"${set.training_vcf}"
      #end for
      #for $num, $annotation in enumerate($anotations)
        -an $annotation
      #end for
      -O "${table_output}"
      #for $num, $level in enumerate($tranche_levels)
        -tranche "${level.tranche}"
      #end for
    ]]></template>
  
    <xml name="vqsr_params">
      <repeat name="resources" title="Training Set">
        <param name="resource_name" type="select" label="Resource Name">
          <option value="hapmap">HapMap</option>
          <option value="omni">OMNI</option>
          <option value="1000G">1000 Genomes Phase 1</option>
          <option value="dbsnp">dbSNP</option>
          <option value="mills">Mills</option>
        </param>
        <param name="known" type="boolean" label="Known?"/>
        <param name="training" type="boolean" label="Training?"/>
        <param name="truth" type="boolean" label="Truth?"/>
        <param name="prior" type="float" label="Prior" value=''/>
        <param name="training_vcf" type="select" label="Training File">
          <options from_data_table="vcf_indexes">
            <validator type="no_options" message="There are no training sets available."/>
          </options>
        </param>
      </repeat>
      <param name="anotations" type="select" multiple="true" label="Use Annotation">
        <option value="QD">QD</option>
        <option value="MQ">MQ</option>
        <option value="MQRankSum">MQRankSum</option>
        <option value="ReadPosRankSum">ReadPosRankSum</option>
        <option value="FS">FS</option>
        <option value="SOR">SOR</option>
        <option value="DP">DP</option>
        <option value="InbreedingCoeff">InbreedingCoeff</option>
      </param>
      <repeat name="tranche_levels" title="Tranche">
        <param name="tranche" type="float" value="" label="Sensitivity level" help="In percent, that is 1.0 for 1 percent. If none are specified will default to 90.0, 99.0, 99.9 and 100.0"/>
      </repeat>
    </xml>
  
    <xml name="vqsr_output_params">
      <data format="table" name="table_output" label="${tool.name} on ${on_string}: Recalibration Table $optional.MODE"/>
      <data format="txt" name="tranches_file" label="${tool.name} on ${on_string}: Tranches File $optional.MODE"/>
    </xml>
  
</macros>
