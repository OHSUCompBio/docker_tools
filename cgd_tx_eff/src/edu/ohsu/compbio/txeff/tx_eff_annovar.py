'''
Read files generated by Annovar and write out a CSV file with variant transcript effects.

Input: One or more variant_function and exonic_variant_function files generated by Annovar. 

Output: CSV file

Created on Apr 14, 2022

@author: pleyte
'''

import logging

from edu.ohsu.compbio.annovar import annovar_parser
from edu.ohsu.compbio.annovar.annovar_parser import AnnovarFileType


class TxEffAnnovar(object):
    '''
    Parses the variant_function and exonic_variant_function files generated by Annovar   
    '''
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def get_annovar_records(self, annovar_variant_function_filename: str, annovar_exonic_variant_function_filename: str):
        '''
        Parse Annovar records from the list files 
        '''
        if annovar_variant_function_filename == None or annovar_exonic_variant_function_filename is None:
            self.logger.warning(f"Annovar input file(s) not provided and this may cause errors during processing: vf={annovar_variant_function_filename}, evf={annovar_exonic_variant_function_filename}")
            
        annovar_records = []
        annovarParser = annovar_parser.AnnovarParser()
    
        # Parse the variant_function file
        file_transcripts = annovarParser.parse_file(AnnovarFileType.VariantFunction, annovar_variant_function_filename)
        self.logger.debug(f'Read {len(file_transcripts)} transcripts from {annovar_variant_function_filename}')    
        annovar_records.extend(file_transcripts)
        
        # Parse the exonic_variant_function file
        file_transcripts = annovarParser.parse_file(AnnovarFileType.ExonicVariantFunction, annovar_exonic_variant_function_filename)
        self.logger.debug(f'Read {len(file_transcripts)} transcripts from {annovar_exonic_variant_function_filename}')
        annovar_records.extend(file_transcripts)
        
        disinct_variant_count = len({f'{x.chromosome}-{x.position}-{x.reference}-{x.alt}' for x in annovar_records})
        self.logger.debug(f'Read {disinct_variant_count} distinct variants and {len(annovar_records)} transcripts from annovar files')
    
        # Merge like transcripts into a single annovar record 
        initial_size = len(annovar_records)
        annovar_records = annovarParser.merge(annovar_records)
    
        self.logger.info(f"Merged {initial_size} transcripts down to {len(annovar_records)}")
        return annovar_records
