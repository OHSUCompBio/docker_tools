'''
Read files generated by Annovar and write out a CSV file with variant transcript effects.

Input: One or more variant_function and exonic_variant_function files generated by Annovar. 

Output: CSV file

Created on Apr 14, 2022

@author: pleyte
'''
import argparse
import csv
import logging
import os
import sys
from edu.ohsu.compbio.annovar import annovar_parser

VERSION = '0.0.1'

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

stream_handler = logging.StreamHandler()
logging_format = '%(levelname)s: [%(filename)s:%(lineno)s - %(funcName)s()]: %(message)s'

stream_format = logging.Formatter(logging_format)
stream_handler.setFormatter(stream_format)
stream_handler.setLevel(logging.DEBUG)
logger.addHandler(stream_handler)


def parse_args():
    '''
    Validate and return command line arguments.
    '''
    parser = argparse.ArgumentParser(description='Read files generated by Annovar and write out a CSV file with variant transcript effects.')
    
    parser.add_argument('-o', '--out', 
                        help='Output CSV', 
                        type=argparse.FileType('w'), 
                        required=True)
    
    parser.add_argument('annovar_file', 
                        nargs=argparse.REMAINDER, 
                        help='One or more variant_function and exonic_variant_function Annovar files.',
                        type=argparse.FileType('r'))
    
    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)
    
    args = parser.parse_args()
    
    if len(args.annovar_file) == 0:
        print("At least one input file is necessary")
        sys.exit(os.EX_CONFIG)
        
    return args


def write_csv(file_name, annovar_records: list):
    '''
    Write the AnnovarVariantFunction records to a csv
    ''' 
    fields = ['chromosome', 'position', 'reference', 'alt', 
              'variant_effect', 'variant_type', 'hgvs_amino_acid_position', 'hgvs_base_position', 
              'exon', 'hgnc_gene', 'hgvs_c_dot', 'hgvs_p_dot_one', 'hgvs_p_dot_three', 
              'splicing', 'refseq_transcript']
    
    with open(file_name, 'w') as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(fields)
        
        for rec in annovar_records:
            
            csv_writer.writerow([rec.chromosome, rec.position, rec.reference, rec.alt, 
                                rec.variant_effect, rec.variant_type, rec.hgvs_amino_acid_position, rec.hgvs_base_position,
                                rec.exon, rec.hgnc_gene, rec.hgvs_c_dot, rec.hgvs_p_dot_one, rec.hgvs_p_dot_three,
                                rec.splicing, rec.refseq_transcript])


def main():
    '''
    main function
    '''
    args = parse_args()

    annovar_records = list()
    annovarParser = annovar_parser.AnnovarParser()

    for file_name in args.annovar_file:
        file_transcripts = annovarParser.parse_file(file_name.name)
        logger.debug(f'Read {len(file_transcripts)} transcripts from {file_name.name}')    
        annovar_records.extend(file_transcripts)

    logger.debug(f'Read {len(annovar_records)} transcripts from {len(args.annovar_file)} files')

    # Merge like transcripts into a single annovar record 
    initial_size = len(annovar_records)
    annovar_records = annovarParser.merge(annovar_records)

    logger.info(f"Merged {initial_size} transcripts down to {len(annovar_records)}")
    
    write_csv(args.out.name, annovar_records)
    logger.info(f"Wrote {args.out.name}")


if __name__ == '__main__':
    main()