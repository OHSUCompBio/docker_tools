'''
Created on Aug. 24, 2022

@author: pleyte
'''

import argparse
import logging
from edu.ohsu.compbio.txeff.util.tx_eff_csv import TxEffCsv
from edu.ohsu.compbio.txeff.util.refseq_to_ccds import RefseqToCcds
from enum import Enum

class CcdsMapFileType(Enum):
    '''
    File type that maps Refseq to CCDS
    '''
    GFF = 1
    CSV = 2
    
class TxEffCcds(object):
    '''
    classdocs
    '''
    def __init__(self, refseq_to_ccds_file):
        '''
        refseq_to_ccds_file is the path to a file that contains mappings from RefSeq id to CCDS id. The file can either 
        be the NCBI GFF (eg https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh37_latest/refseq_identifiers/GRCh37_latest_genomic.gff.gz) 
        or the csv file generated by ``tx_eff_csv.py``  
        '''
        # Save the filename for later 
        self.refseq_to_ccds_file = refseq_to_ccds_file
        
        # Set up a logger for this class
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.DEBUG)

        stream_handler = logging.StreamHandler()
        logging_format = '%(levelname)s: [%(filename)s:%(lineno)s - %(funcName)s()]: %(message)s'

        stream_format = logging.Formatter(logging_format)
        stream_handler.setFormatter(stream_format)
        stream_handler.setLevel(logging.INFO)
        logger.addHandler(stream_handler)
        self.logger = logger

    def _get_refseq_to_ccds_mappings(self):
        '''
        Return a dictionary of RefSeq id to CCDS id. The mappings are read from a CSV or a GFF that was specified at class construction.
        '''
        refseq_to_ccds = RefseqToCcds()
        
        map_file_type = self.__get_file_type(self.refseq_to_ccds_file)
        
        if(map_file_type == CcdsMapFileType.GFF):
            refSeq_to_ccds_mappings = refseq_to_ccds.get_mappings_from_gff(self.refseq_to_ccds_file)
        elif(map_file_type == CcdsMapFileType.CSV):
            refSeq_to_ccds_mappings = refseq_to_ccds.get_mappings_from_csv(self.refseq_to_ccds_file)
        else:
            raise Exception(f"Mapping file must be csv or gff. File type is unknown: {self.refseq_to_ccds_file}")
        
        return refSeq_to_ccds_mappings

    def __get_file_type(self, file_name:str):        
        '''
        Determines file type by reading the first line of the file. A gff file will have a comment with the gff version in the first line; a csv will have the field headers in the first line. 
        '''
        with open(file_name) as f:
            firstline = f.readline().rstrip()
        
        if('gff' in firstline):
            # The first line of a gff file should be something like "##gff-version 3" 
            return CcdsMapFileType.GFF
        elif('refseq_id' in firstline and 'ccds_id' in firstline):
            # The first line of the csv is the field list
            return CcdsMapFileType.CSV
            
        self.logger.warn(f"Expected GFF or CSV but received unknown file type having first line: {firstline}")
        return None
        
    def add_ccds_transcripts(self, refseq_transcripts: list):
        '''
        Iterate over the list of RefSeq transcripts, lookup each refseq id in the Refseq-to-CCDS id map, and create a copy of the transcript.  
        '''
        cnt_mapped_to_ccds = 0
        cnt_not_mapped_to_ccds = 0
        
        refSeq_to_ccds_mappings = self._get_refseq_to_ccds_mappings()
        if(len(refSeq_to_ccds_mappings) == 0): 
            raise Exception(f"No mappings found in input file {self.refseq_to_ccds_file}") 
        
        # Uses index to iterate over the list so we don't traverse into the items that are being appended
        for i in range(0, len(refseq_transcripts)):
            refseq_transcript = refseq_transcripts[i] 
            refseq_id = refseq_transcript.refseq_transcript
            ccds_id = refSeq_to_ccds_mappings.get(refseq_id)
            
            if ccds_id:
                cnt_mapped_to_ccds = cnt_mapped_to_ccds + 1
                ccds_trainscript = refseq_transcript.get_copy()
                ccds_trainscript.refseq_transcript = ccds_id
                refseq_transcripts.append(ccds_trainscript)
            else:
                cnt_not_mapped_to_ccds = cnt_not_mapped_to_ccds
                self.logger.debug(f"Unable to find CCDS id mapping for {refseq_id}")
                            
        self.logger.info(f"Added {cnt_mapped_to_ccds} transcripts with ids mapped from refseq to ccds.")
        if(cnt_not_mapped_to_ccds > 0):
            self.logger.warning(f"Could not find mappings for {cnt_not_mapped_to_ccds} refseq ids.")
            

def _parse_args():
    '''
    Validate and return command line arguments.
    '''
    parser = argparse.ArgumentParser(description='Read file generated by tx_eff_hgvs.py and create a copy of each RefSeq transcript, with its corresponding CCDS id.')

    parser.add_argument('-i', '--in_file',  
                        help='Input CSV (generated by tx_eff_hgvs.py)',
                        type=argparse.FileType('r'),
                        required=True)
    
    parser.add_argument('-c', '--ccds_map', 
                        help='Input CSV or GFF with Annovar-to-CCDS mappings. Use refseq_to_ccds.py to convert GFF to CSV.', 
                        type=argparse.FileType('r'), 
                        required=True)

    parser.add_argument('-o', '--out_file', 
                        help='Output CSV', 
                        type=argparse.FileType('w'), 
                        required=True)
    
    args = parser.parse_args()
    return args

def _main():
    '''
    '''
    args = _parse_args()
    
    # Read transcripts that have been written to csv
    txEffCsv = TxEffCsv()
    transcripts = txEffCsv.read_transcripts(args.in_file.name)
    
    # Add CCDS copies of refseq transcripts
    txEffCcds = TxEffCcds(args.ccds_map.name)
    txEffCcds.add_ccds_transcripts(transcripts)
    
    # Write the old and new records to file
    txEffCsv.write_transcripts(args.out_file.name, transcripts)
    
if __name__ == '__main__':
    _main()        