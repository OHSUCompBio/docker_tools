<tool id="bwa_mem2" name="BWA-MEM2" version="2.2.1">
  <description>Map low-divergent sequences against a large reference genome.</description> 
  <requirements>
    <requirement type="package" version="2.2.1">bwa-mem2</requirement>
  </requirements>
  <command detect_errors="exit_code"><![CDATA[
    bwa-mem2 mem
      $mark
      #if $read_group.R == "true":
        -R "@RG\tID:$read_group.ID\tLB:$read_group.LB\tPL:$read_group.PL\tSM:$read_group.SM"
      #end if
      -t \${GALAXY_SLOTS:-16}
      #if $min_seed:
        -k $min_seed
      #end if
      #if $band_width:
        -w $band_width
      #end if
      #if $x_dropoff:
        -d $x_dropoff
      #end if
      #if $re_seed:
        -r $re_seed
      #end if
      #if $discard
        -c $discard
      #end if
      $pair_end_mode
      #if $matching_score:
        -A $matching_score
      #end if
      #if $mismatch_penalty:
        -B $mismatch_penalty
      #end if
      #if $gap_open_penalty:
        -O $gap_open_penalty
      #end if
      #if $gap_extension_penalty:
        -E $gap_extension_penalty
      #end if
      #if $clipping_penalty:
        -L $clipping_penalty
      #end if
      #if $unpaired_penalty
        -U $unpaired_penalty
      #end if
      $interleaved
      #if $min_score:
        -T $min_score
      #end if
      $output_all
      $comment
      $hard_clipping
      #if $verbosity
        -v $verbosity
      #end if
      #if $reference_source.reference_source_selector != "no_ref"
            #if $reference_source.reference_source_selector != "history"
                ${reference_source.reference_sequence.fields.path}
            #else
                ${reference_source.reference_sequence}
            #end if
        #end if
      "${fastq}"
      "${rfastq}"
      > "${output}" 2> "${log}"
  ]]></command>

  <inputs>
    <conditional name="reference_source">
            <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
                <option value="cached">Locally cached</option>
                <option value="history">History</option>
                <option value="no_ref" selected="true">Do not pass</option>
            </param>
            <when value="cached">
                <param name="reference_sequence" type="select" label="Reference" help="Reference sequence file." >
                    <options from_data_table="bwamem2_indexes" >
                        <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file" />
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="reference_sequence" type="data" format="fasta" label="Reference" help="Reference sequence file." />
            </when>
    </conditional>
    <param name="fastq" type="data" format="fastq,fastqsanger,fastqillumina,fastq.gz" label="Select Forward FASTQ file" help="FASTQ with either Sanger-scaled quality values (fastqsanger) or Illumina-scaled quality values (fastqillumina)" />
    <param name="rfastq" type="data" format="fastq,fastqsanger,fastqillumina,fastq.gz" label="Select Reverse FASTQ file" help="FASTQ with either Sanger-scaled quality values (fastqsanger) or Illumina-scaled quality values (fastqillumina)" />
    <conditional name="read_group">
      <param name="R" type="boolean" checked="true" label="Include Read Group" help="Complete read group header line. ’\t’ can be used in STR and will be converted to a TAB in the output SAM. The read group ID will be attached to every read in the output. An example is ’@RG\tID:foo\tSM:bar’."/>
      <when value="true">
        <param name="ID" type="text" label="Read Group Identifier (ID)" help="Read group identifier (ID). Each @RG line must have a unique ID. The value of ID is used in the RG tags of alignment records. Must be unique among all read groups in header section."/>
        <param name="LB" type="text" label="Library name (LB)" help="LB"/>
        <param name="PL" type="select" label="Platform/technology used to produce reads (PL)">
          <option value="ILLUMINA">Illumina</option>
          <option value="HELICOS">Helicos</option>
          <option value="CAPILLARY">Capillary</option>
          <option value="LS454">LS454</option>
          <option value="SOLID">Solid</option>
          <option value="IONTORRENT">Ion Torrent</option>
          <option value="PACBIO">PacBio</option>
        </param>
        <param name="SM" type="text" label="Sample (SM)" help="Use pool name where a pool is being sequenced."/>
      </when>
    </conditional>
    <param name="mark" type="boolean" checked="true" truevalue="-M" falsevalue="" label="Mark shorter split hits as secondary." help="for Picard compatability."/>
    <param name="num_threads" type="integer" optional="true" label="Number of Threads" help="Default = 1"/>
    <param name="min_seed" type="integer" optional="true" label="Minimum Seed Length." help="Minimum seed length. Matches shorter than integer will be missed. The alignment speed is usually insensitive to this value unless it significantly deviates 20. Default = [19]"/>
    <param name="band_width" type="integer" optional="true" label="Band Width" help="Band width. Essentially, gaps longer than INT will not be found. Note that the maximum gap length is also affected by the scoring matrix and the hit length, not solely determined by this option. [100]"/>
    <param name="x_dropoff" type="integer" optional="true" label="Off-diagonal X-dropoff" help="Off-diagonal X-dropoff (Z-dropoff). Stop extension when the difference between the best and the current extension score is above |i-j|*A+INT, where i and j are the current positions of the query and reference, respectively, and A is the matching score. Z-dropoff is similar to BLAST’s X-dropoff except that it doesn’t penalize gaps in one of the sequences in the alignment. Z-dropoff not only avoids unnecessary extension, but also reduces poor alignments inside a long good alignment. [100]"/>
    <param name="re_seed" type="float" optional="true" label="Trigger Re-seeding" help="Trigger re-seeding for a MEM longer than minSeedLen*FLOAT. This is a key heuristic parameter for tuning the performance. Larger value yields fewer seeds, which leads to faster alignment speed but lower accuracy. [1.5]"/>
    <param name="discard" type="integer" optional="true" label="Discard a MEM with occurances in genome over:" help="Discard a MEM if it has more than INT occurence in the genome. This is an insensitive parameter. [10000]"/>
    <param name="pair_end_mode" type="boolean" checked="false" truevalue="-P" falsevalue="" label="Paired-end Mode" help="In the paired-end mode, perform SW to rescue missing hits only but do not try to find hits that fit a proper pair."/>
    <param name="matching_score" type="integer" optional="true" label="Matching Score" help="Defaults to 1."/>
    <param name="mismatch_penalty" type="integer" optional="true" label="Mismatch Penalty" help="Mismatch penalty. The sequence error rate is approximately: {.75 * exp[-log(4) * B/A]}. [4]"/>
    <param name="gap_open_penalty" type="integer" optional="true" label="Gap Open Penalty" help="Defaults to 6."/>
    <param name="gap_extension_penalty" type="integer" optional="true" label="Gap Extension Penalty" help="Gap extension penalty. A gap of length k costs O + k*E (i.e. -O is for opening a zero-length gap). [1]"/>
    <param name="clipping_penalty" type="integer" optional="true" label="Clipping Penalty" help="Clipping penalty. When performing SW extension, BWA-MEM keeps track of the best score reaching the end of query. If this score is larger than the best SW score minus the clipping penalty, clipping will not be applied. Note that in this case, the SAM AS tag reports the best SW score; clipping penalty is not deducted. [5]"/>
    <param name="unpaired_penalty" type="integer" optional="true" label="Penalty for Unpaired Read Pair" help="Penalty for an unpaired read pair. BWA-MEM scores an unpaired read pair as scoreRead1+scoreRead2-INT and scores a paired as scoreRead1+scoreRead2-insertPenalty. It compares these two scores to determine whether we should force pairing. [9]"/>
    <param name="interleaved" type="boolean" checked="false" label="Interleaved" help="Assume the first input query file is interleaved paired-end FASTA/Q." truevalue="-p" falsevalue=""/>
    <param name="min_score" type="integer" optional="true" label="Minimum Alingment Score" help="Don’t output alignment with score lower than INT. This option only affects output. [30]"/>
    <param name="output_all" type="boolean" checked="false" label="Output All Found Alignments" help="Output all found alignments for single-end or unpaired paired-end reads. These alignments will be flagged as secondary alignments." truevalue="-a" falsevalue=""/>
    <param name="comment" type="boolean" checked="false" label="Append FASTA/Q Comment" help="Append append FASTA/Q comment to SAM output. This option can be used to transfer read meta information (e.g. barcode) to the SAM output. Note that the FASTA/Q comment (the string after a space in the header line) must conform the SAM spec (e.g. BC:Z:CGTAC). Malformated comments lead to incorrect SAM output." truevalue="-C" falsevalue=""/> 
    <param name="hard_clipping" type="boolean" checked="false" label="Hard Clipping" help="Use hard clipping ’H’ in the SAM output. This option may dramatically reduce the redundancy of output when mapping long contig or BAC sequences." truevalue="-H" falsevalue=""/>
    <param name="verbosity" type="integer" optional="true" label="Verbosity" help="Control the verbose level of the output. This option has not been fully supported throughout BWA. Ideally, a value 0 for disabling all the output to stderr; 1 for outputting errors only; 2 for warnings and errors; 3 for all normal messages; 4 or higher for debugging. When this option takes value 4, the output is not SAM. [3]"/>
  </inputs>

  <outputs>
    <data format="sam" name="output" label="${tool.name} on ${on_string}: mapped reads"/>
    <data format="txt" name="log" label="${tool.name} on ${on_string}: log"/>
  </outputs>
  <help><![CDATA[

    **What it does**

    bwa-mem2 is the next version of the bwa-mem algorithm in bwa. It produces alignment identical to bwa and is ~1.3-3.1x faster depending on the use-case, dataset and the running machine.

    The original bwa was developed by Heng Li (@lh3). Performance enhancement in bwa-mem2 was primarily done by Vasimuddin Md (@yuk12) and Sanchit Misra (@sanchit-misra) from Parallel Computing Lab, Intel. Bwa-mem2 is distributed under the MIT license.

    See https://github.com/bwa-mem2/bwa-mem2 for details on bwa-mem2.

    ------

    **Usage**

    The usage is exactly same as the original BWA MEM tool. Here is a brief synopsys. Run ./bwa-mem2 for available commands.

    Indexing the reference sequence (Requires 28N GB memory where N is the size of the reference sequence):
    ./bwa-mem2 index [-p prefix] <in.fasta>
    Where
    <in.fasta> is the path to reference sequence fasta file and
    <prefix> is the prefix of the names of the files that store the resultant index. Default is in.fasta.

    Mapping:
    Run "./bwa-mem2 mem" to get all options:
    ./bwa-mem2 mem -t <num_threads> <prefix> <reads.fq/fa> > out.sam
    Where <prefix> is the prefix specified when creating the index or the path to the reference fasta file in case no prefix was provided.

    ------

    **Input formats**

    BWA accepts files in either Sanger FASTQ format (galaxy type *fastqsanger*) or Illumina FASTQ format (galaxy type *fastqillumina*). Use the FASTQ Groomer to prepare your files.

    ------

    **Citation**

    Vasimuddin Md, Sanchit Misra, Heng Li, Srinivas Aluru. Efficient Architecture-Aware Acceleration of BWA-MEM for Multicore Systems. IEEE Parallel and Distributed Processing Symposium (IPDPS), 2019.

]]></help>
</tool>
